<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FFmpeg日志系统</title>
      <link href="/2022/10/04/FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/10/04/FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤一：引入相关头文件"><a href="#步骤一：引入相关头文件" class="headerlink" title="步骤一：引入相关头文件"></a>步骤一：引入相关头文件</h2><p>从libavutil这个包含工具函数的文件夹中引入log.h头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="步骤二：设置日志级别"><a href="#步骤二：设置日志级别" class="headerlink" title="步骤二：设置日志级别"></a>步骤二：设置日志级别</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">av_log_set_level</span>(AV_LOG_DEBUG)</span><br></pre></td></tr></table></figure><p><strong>常用的日志级别：</strong></p><ul><li>AV_LOG_ERROR</li><li>AV_LOG_WARNING</li><li>AV_LOG_INFO</li><li>AV_LOG_DEBUG</li></ul><p>从上到下看，这四个优先级别：从高到低。<br>也就是说如果设置为最低级别的AV_LOG_DEBUG，那么所有的日志信息都会打印出来；而如果设置为最高级别的AV_LOG_ERROR，那么只有AV_LOG_ERROR的日志信息才会打印出来。</p><h2 id="步骤三：打印日志信息"><a href="#步骤三：打印日志信息" class="headerlink" title="步骤三：打印日志信息"></a>步骤三：打印日志信息</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;...%s\n&quot;</span>, op)</span><br></pre></td></tr></table></figure><p>av_log(…)函数中的第1个参数指定该log所属的结构体,例如AVFormatContext、AVCodecContext等等，一般都设置成NULL；第2个参数表示该日志的级别；第3个参数是需要打印的字符串信息，里面可以添加%s，%d等占位符，第4，5，…参数代表第3个参数中字符串内占位符要显示的内容。</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    av_log_set_level(AV_LOG_DEBUG);<span class="comment">//设置日志级别</span></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_DEBUG, <span class="string">&quot;Hello word!\n&quot;</span>);<span class="comment">//设置输出内容</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存成.cw文件退出后，打开命令行窗口，</p><p>Mac下输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang -g -o log log.c -I/usr/local/ffmpeg/include -L/usr/local/ffmpeg/lib -lavutil</span><br><span class="line">或者是输入：</span><br><span class="line">clang -g -o log log.c `pkg-config --cflags --libs libavutil`</span><br></pre></td></tr></table></figure><p>Linux下输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -o</span><br></pre></td></tr></table></figure><p>PS：</p><p>-g 参数：输出有调试信息的</p><p>-o 参数：-o参数后面接的是输出执行文件的名称</p><p>-I 参数：指定引入的FFmpeg头文件的路径</p><p>-L 参数：指定所依赖的FFmpeg库的路径</p><p>-l 参数：指定所依赖的FFmpeg库的名称</p><p>–cflag参数：表示获取所需要引入的头文件目录地址</p><p> –libs参数：表示获取所依赖的库路径以及指定所要添加的库的名字（后面接库的名字）</p><p>回车编译后，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./log</span><br></pre></td></tr></table></figure><p>就能看到结果了。</p><p><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/1.png"></p><p>如果将代码中的日志级别改成AV_LOG_INFO的话，那就无法输出AV_LOG_DEBUG级别的信息了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    av_log_set_level(AV_LOG_INFO);<span class="comment">//改成AV_LOG_INFO级别</span></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_DEBUG, <span class="string">&quot;AV_LOG_DEBUG级别日志信息\n&quot;</span>);</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;AV_LOG_INFO级别日志信息&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/2.png"></p><p>而比AV_LOG_INFO级别更高的日志是可以正常打印的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    av_log_set_level(AV_LOG_INFO);<span class="comment">//改成AV_LOG_INFO级别</span></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_DEBUG, <span class="string">&quot;AV_LOG_DEBUG级别日志信息\n&quot;</span>);</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;AV_LOG_INFO级别日志信息&quot;</span>);</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;AV_LOG_ERROR级别日志信息&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/3.png"></p><p>PS：</p><p>如果采用pkg-config报以下错误的话：<br><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/4.png"></p><p>说明没有配置环境，首先在命令行窗口输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile </span><br></pre></td></tr></table></figure><p>打开后添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/ffmpeg/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/ffmpeg/lib/pkgconfig</span><br><span class="line">export LD_LIBRARY_PATH=$LIB_LIBRARY_PATH:/usr/local/ffmpeg/lib</span><br></pre></td></tr></table></figure><p>然后按下esc退出编辑后，按下:wq保存退出</p><p>接着输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>此时环境配置生效，再次运行命令，即可正常编译<br><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/5.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg学习笔记</title>
      <link href="/2022/10/03/FFmpeg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/03/FFmpeg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>之前学习FFmpeg一直是跳着学，用到什么学习什么，没有一个系统性的学习过程。因此趁着最近这段时间刚好有空，想从头到尾仔仔细细的学习一遍，同时整理一下相关的学习笔记，帮助别其他伙伴们快速入门FFmpeg，同时也方便自己后续进行回顾学习。</p><p>本篇博客的目的是让零基础的读者可以通过阅读该博客，从而彻底的熟练使用FFmpeg，以及音视频的相关知识。因此我将通过之前学习雷霄骅前辈的博客，李超大佬的课程，以及实际项目工作中运用到知识和遇到的问题进行精华总结。帮助其他伙伴们从零开始彻底掌握FFmpeg。</p><h1 id="本课程分为四个部分："><a href="#本课程分为四个部分：" class="headerlink" title="本课程分为四个部分："></a>本课程分为四个部分：</h1><h2 id="第一部分：音视频基础知识"><a href="#第一部分：音视频基础知识" class="headerlink" title="第一部分：音视频基础知识"></a>第一部分：音视频基础知识</h2><h3 id="帧率、码率、比特率等参数含义"><a href="#帧率、码率、比特率等参数含义" class="headerlink" title="- 帧率、码率、比特率等参数含义"></a>- 帧率、码率、比特率等参数含义</h3><h3 id="I帧、B帧、P帧的区别"><a href="#I帧、B帧、P帧的区别" class="headerlink" title="- I帧、B帧、P帧的区别"></a>- I帧、B帧、P帧的区别</h3><h3 id="YUV和RGB是什么"><a href="#YUV和RGB是什么" class="headerlink" title="- YUV和RGB是什么"></a>- YUV和RGB是什么</h3><h3 id="H264是什么"><a href="#H264是什么" class="headerlink" title="- H264是什么"></a>- H264是什么</h3><h2 id="第二部分：-如何在各个平台上编译FFmpeg"><a href="#第二部分：-如何在各个平台上编译FFmpeg" class="headerlink" title="第二部分： 如何在各个平台上编译FFmpeg"></a>第二部分： 如何在各个平台上编译FFmpeg</h2><h3 id="Windows系统编译FFmpeg"><a href="#Windows系统编译FFmpeg" class="headerlink" title="- Windows系统编译FFmpeg"></a>- Windows系统编译FFmpeg</h3><h3 id="MacOS系统编译FFmpeg"><a href="#MacOS系统编译FFmpeg" class="headerlink" title="- MacOS系统编译FFmpeg"></a>- <a href="https://wujianqiangcode.github.io/2022/10/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/">MacOS系统编译FFmpeg</a></h3><h3 id="Linux系统编译FFmpeg"><a href="#Linux系统编译FFmpeg" class="headerlink" title="- Linux系统编译FFmpeg"></a>- Linux系统编译FFmpeg</h3><h3 id="编译IOS系统可用的FFmpeg"><a href="#编译IOS系统可用的FFmpeg" class="headerlink" title="- 编译IOS系统可用的FFmpeg"></a>- 编译IOS系统可用的FFmpeg</h3><h3 id="编译Android系统可用的FFmpeg"><a href="#编译Android系统可用的FFmpeg" class="headerlink" title="- 编译Android系统可用的FFmpeg"></a>- 编译Android系统可用的FFmpeg</h3><h2 id="第三部分：FFmpeg常用的命令有哪些"><a href="#第三部分：FFmpeg常用的命令有哪些" class="headerlink" title="第三部分：FFmpeg常用的命令有哪些"></a>第三部分：FFmpeg常用的命令有哪些</h2><h2 id="第四部分：如何调用FFmpeg的函数实现功能"><a href="#第四部分：如何调用FFmpeg的函数实现功能" class="headerlink" title="第四部分：如何调用FFmpeg的函数实现功能"></a>第四部分：如何调用FFmpeg的函数实现功能</h2><h3 id="FFmpeg源代码结构"><a href="#FFmpeg源代码结构" class="headerlink" title="- FFmpeg源代码结构"></a>- FFmpeg源代码结构</h3><h3 id="FFmpeg日志系统"><a href="#FFmpeg日志系统" class="headerlink" title="- FFmpeg日志系统"></a>- FFmpeg日志系统</h3><h2 id="第五部分：深入理解主流的音视频协议"><a href="#第五部分：深入理解主流的音视频协议" class="headerlink" title="第五部分：深入理解主流的音视频协议"></a>第五部分：深入理解主流的音视频协议</h2><h2 id="第六部分：深度剖析FFmpeg源代码"><a href="#第六部分：深度剖析FFmpeg源代码" class="headerlink" title="第六部分：深度剖析FFmpeg源代码"></a>第六部分：深度剖析FFmpeg源代码</h2><h2 id="第七部分：第三方开源库和主流渲染引擎框架的学习"><a href="#第七部分：第三方开源库和主流渲染引擎框架的学习" class="headerlink" title="第七部分：第三方开源库和主流渲染引擎框架的学习"></a>第七部分：第三方开源库和主流渲染引擎框架的学习</h2><h3 id="第三方开源库"><a href="#第三方开源库" class="headerlink" title="第三方开源库"></a>第三方开源库</h3><h4 id="WebRTC-学习笔记"><a href="#WebRTC-学习笔记" class="headerlink" title="- WebRTC 学习笔记"></a>- WebRTC 学习笔记</h4><h4 id="libyuv"><a href="#libyuv" class="headerlink" title="- libyuv"></a>- libyuv</h4><h4 id="Mplayer"><a href="#Mplayer" class="headerlink" title="- Mplayer"></a>- Mplayer</h4><h4 id="x264"><a href="#x264" class="headerlink" title="- x264"></a>- x264</h4><h4 id="OpenCV-学习笔记"><a href="#OpenCV-学习笔记" class="headerlink" title="- OpenCV 学习笔记"></a>- OpenCV 学习笔记</h4><h3 id="主流渲染引擎框架"><a href="#主流渲染引擎框架" class="headerlink" title="主流渲染引擎框架"></a>主流渲染引擎框架</h3><h4 id="OpenGL-学习笔记"><a href="#OpenGL-学习笔记" class="headerlink" title="- OpenGL 学习笔记"></a>- OpenGL 学习笔记</h4><h4 id="Metal-学习笔记"><a href="#Metal-学习笔记" class="headerlink" title="- Metal 学习笔记"></a>- Metal 学习笔记</h4><h4 id="DirectX-3D-学习笔记"><a href="#DirectX-3D-学习笔记" class="headerlink" title="- DirectX 3D 学习笔记"></a>- DirectX 3D 学习笔记</h4><h4 id="OpenCL"><a href="#OpenCL" class="headerlink" title="- OpenCL"></a>- OpenCL</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg源代码结构</title>
      <link href="/2022/10/03/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/"/>
      <url>/2022/10/03/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="FFmpeg源代码目录："><a href="#FFmpeg源代码目录：" class="headerlink" title="FFmpeg源代码目录："></a>FFmpeg源代码目录：</h1><p><img src="/./FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/1.png"></p><table>  <tr>    <th>libavcodec</th>    <th>包含一系列编解码器等实现（如：h264、h265、AAC、Opus等）  </tr>  <tr>    <td>libavformat</td>    <td>包含音视频协议、容器格式以及IO访问的相关函数实现</td>  </tr>  <tr>    <td>libavutil</td>    <td>包含hash器，解码器和各种工具函数</td>  </tr>  <tr>    <td>libavfilter</td>    <td>提供了各种音视频过滤器（如：多路流合并、变速等特效）</td>  </tr>  <tr>    <td>libavdevice</td>    <td>包含对所有音视频设备等操作，提供访问捕获设备和回放设备等接口</td>  </tr>  <tr>    <td>libswresample</td>    <td>实现了混音和重采样</td>  </tr>  <tr>    <td>libswscale</td>    <td>实现了色彩转换和图像的缩放功能</td>  </tr></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac下编译FFmpeg全过程</title>
      <link href="/2022/10/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/10/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><p>首先用在命令行窗口用Git命令下载FFmpeg源代码</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.ffmpeg.org/ffmpeg.git</span><br></pre></td></tr></table></figure><p>进行源代码的下载</p><h2 id="编译FFmpeg"><a href="#编译FFmpeg" class="headerlink" title="编译FFmpeg"></a>编译FFmpeg</h2><p>下载完后，进入ffmpeg文件夹进行编译</p><p>首先输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --cc=/usr/bin/clang --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libmp3lame --enable-libx265  --enable-filter=delogo --enable-debug --disable-optimizations --enable-libspeex --enable-videotoolbox --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --host-cflags= --host-ldflags=</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/1.png"></p><h3 id="检测编译环境"><a href="#检测编译环境" class="headerlink" title="检测编译环境"></a>检测编译环境</h3><h4 id="安装yasm"><a href="#安装yasm" class="headerlink" title="安装yasm"></a>安装yasm</h4><p>如果出现该报错提示，说明还需要下载一下yasm</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/2.png"></p><p><a href="http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz">yasm的下载链接</a></p><p>解压完yasm后，切换路径：</p><p>cd yasm-1.3.0<br> 接着进行执行配置，输入：</p><p> .&#x2F;configure<br>然后进行编译，输入：</p><p>make<br>最后进行安装，输入：</p><p>make install（提示：Permission denied，就执行sudo make install）</p><p>安装成功yasm后，我们继续cd进入到ffmpeg的文件夹下，进行.&#x2F;configure操作</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/3.png"></p><h4 id="安装libmp3lame"><a href="#安装libmp3lame" class="headerlink" title="安装libmp3lame"></a>安装libmp3lame</h4><p>如果出现以下报错，说明我们还得安装一下libmp3lame</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/5.png"></p><p><a href="https://sourceforge.net/projects/lame/files/lame/3.99/">libmp3lame的下载地址</a></p><p>解压完lame-3.100后，切换路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd lame-3.100</span><br></pre></td></tr></table></figure><p> 接着进行执行配置，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>然后进行编译，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/6.png"></p><p>如果出现以上报错，进入include文件夹，找到libmp3lame.sym文件</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/7.png"></p><p>删除lame_init_old所在行</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/8.png"></p><p>然后继续make</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/9.png"></p><p> 最后进行安装，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install（提示：Permission denied，就执行sudo make install）</span><br></pre></td></tr></table></figure><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/10.png"></p><p>继续cd到ffmpeg文件夹中，进行.&#x2F;configure操作</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/11.png"></p><h4 id="安装x264、x265-等"><a href="#安装x264、x265-等" class="headerlink" title="安装x264、x265 等"></a>安装x264、x265 等</h4><p>大概率x264、x265这些也没有安装，直接一口气输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install fdk-aac&amp;&amp;brew install x264&amp;&amp;brew install x265&amp;&amp;brew install speex&amp;&amp;brew install pkg-config&amp;&amp;brew  install sdl2</span><br></pre></td></tr></table></figure><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/12.png"><br>等待跑完后 再执行<br>之前ffmpeg到configure操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --cc=/usr/bin/clang --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libmp3lame --enable-libx265  --enable-filter=delogo --enable-debug --disable-optimizations --enable-libspeex --enable-videotoolbox --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --host-cflags= --host-ldflags=</span><br></pre></td></tr></table></figure><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/13.png"></p><p>此时输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>必须加上sudo，否则会出现改报错<br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/15.png"><br>开始进行编译<br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/14.png"><br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/16.png"></p><p>等待编译完成后，我们输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/ffmpeg/</span><br></pre></td></tr></table></figure><p>进入后就能看到我们编译完成的文件了。<br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/17.png"></p><h2 id="添加ffmpeg环境变量"><a href="#添加ffmpeg环境变量" class="headerlink" title="添加ffmpeg环境变量"></a>添加ffmpeg环境变量</h2><p>接下来为了方便，我们修改一下环境变量，命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p>回车后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH: /usr/local/ffmpeg/bin</span><br></pre></td></tr></table></figure><p>然后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>接着输入，让环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后查看环境变量的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>此时如果生效后在任意位置打开命令行窗口输入ffmpeg，将显示如下内容，证明已成功安装完成。<br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/18.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo搭建个人博客全过程</title>
      <link href="/2022/10/01/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/10/01/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en/">安装地址</a></p><p>点击16.17.1.LTS</p><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png"><br>下载完成后，一直点击下一步进行安装即可</p><p><font color = gree>PS:这个安装包内除了Node.js以外，还包含npm包管理器，这个是等会搭建hexo博客所必须用到的东西。</font></p><h2 id="通过npm安装cnpm"><a href="#通过npm安装cnpm" class="headerlink" title="通过npm安装cnpm"></a>通过npm安装cnpm</h2><p>接着打开终端,切换到root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>输入密码<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png"></p><span id="more"></span><p>此时我们可以查看一下刚刚安装的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png"></p><p>此时证明刚刚有成功安装node.js</p><p>接着利用npm来安装cmpn，通过镜像圆来解决访问国外网站较慢的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png"><br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png"></p><p>接着用cmpn来安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png"></p><h2 id="通过hexo搭建博客"><a href="#通过hexo搭建博客" class="headerlink" title="通过hexo搭建博客"></a>通过hexo搭建博客</h2><p>输入pwd查看当前位置</p><p>接着新建一个空白文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><p><font color =gree>PS：后续如果在搭建博客的过程中出现问题的话，可以把该文件夹删掉，再重来接下来的所有步骤</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog/</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/7.png"></p><p>接下来可以真正使用hexo来生成我们的博客，先初始化一个博客，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8.png"><br>等待安装初始化完成后，启动我们的博客，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/9.png"></p><p>用浏览器打开<a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/10.png"></p><p>接着键盘输入control+c断开连接</p><p>此时，我们可以创建一篇文章，按照顺序输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;第一篇文章&quot;</span><br><span class="line">cd source/_posts/</span><br><span class="line">ls</span><br><span class="line">vim 第一篇文章.md</span><br></pre></td></tr></table></figure><p>进入vim后可以随便输入点内容,然后保存退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>接着按照顺序输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>继续用浏览器打开<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%88%9A%E5%88%9A%E5%86%99%E7%9A%84%E5%86%85%E5%AE%B9%E4%BA%86">http://localhost:4000/，就可以看到刚刚写的内容了</a></p><h2 id="将博客部署到Github上"><a href="#将博客部署到Github上" class="headerlink" title="将博客部署到Github上"></a>将博客部署到Github上</h2><p>接下来，我们先在浏览器上登陆Github，并新建一个仓库</p><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/11.png"></p><p>然后输入Repository name<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/12.png"></p><p>Description里面可以简单写一下<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/13.png"></p><p>最后点击Creat repository<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/14.png"></p><p>接着安装git部署插件，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/15.png"></p><p>然后用vim打开config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>到文件最底部，找到# Deployment配置<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16.png"></p><p>在type:后面写上：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/18.png"><br>并输入:wq保存退出</p><p>PS:repo的地址在这：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/17.png"></p><p>此时将它部署到GitHub上，，先配置git信息，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;wujianqiangCode&quot;</span><br><span class="line">git config --global user.email &quot;ijianqiangwu@outlook.com&quot;</span><br></pre></td></tr></table></figure><p>接着输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果出现该报错：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/19.png"><br>github在2021年8月14日七夕这天搞事情，如果这天你提交了github代码报错如下：<br>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>那么就得换成token登陆了，坑爹！</p><p>登录自己的github账号，个人设置那里<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20.png"></p><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/21.png"></p><p>找到Developer seetings，点击进入配置<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/22.png"></p><p>最后点击Generate生成令牌<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/23.png"></p><p>记得把你的token保存下来，因为你再次刷新网页的时候，你已经没有办法看到它了！！！</p><p>之后就可以用自己生成的token登录，把上面生成的token粘贴到输入密码的位置，然后成功hexo d了。</p><p>此时输入<a href="https://wujianqiangcode.github.io/%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E5%8D%9A%E5%AE%A2%E4%BA%86">https://wujianqiangcode.github.io/就能看到博客了</a></p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>接着是更换主题，浏览器输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github.com/litten/hexo-theme-yilia</span><br></pre></td></tr></table></figure><p>这边推荐可以换成🀄这个作者的主题,将他的主题仓库克隆到我们的themes&#x2F;yilia文件夹中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>clone完后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml </span><br></pre></td></tr></table></figure><p>找到theme<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/24.png"><br>换成yilia后保存退出<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/25.png"></p><p>接着为了能够插入图片，找到post_asset_folder：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/27.png"></p><p>改成：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/28.png"></p><p>保存退出后，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure><p>接着输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>此时登陆博客，多刷新几次后就能看到结果<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/26.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
