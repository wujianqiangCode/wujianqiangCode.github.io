<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac下编译可调式的Debug版本FFmpeg全过程</title>
      <link href="/2022/11/10/%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91%E5%8F%AF%E8%B0%83%E8%AF%95%E7%9A%84Debug%E7%89%88%E6%9C%ACFFmpeg%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87GDB%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/"/>
      <url>/2022/11/10/%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91%E5%8F%AF%E8%B0%83%E8%AF%95%E7%9A%84Debug%E7%89%88%E6%9C%ACFFmpeg%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87GDB%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>今天说一个比较好用的学习ffmpeg的方法。我们经常通过ffmpeg的命令来进行文件格式转换或者是查看文件的媒体信息。</p><p>如果这个时候，我们想知道ffmpeg在执行我们输入命令后的具体程序运行流程，那么，我们就需要编译一个可调式版本的ffmpeg。事实上，通过调试我们输入的ffmpeg命令，在一定程度上有利于我们加深对ffmpeg的理解与学习。</p><p>接下来，本文将通过以下几个步骤来演示如何调试ffmpeg</p><ul><li>ffmpeg的下载与编译</li><li>如何通过gdb调试ffmpeg</li><li>如何在vscode调试ffmpeg</li></ul><h1 id="FFmpeg的下载与编译"><a href="#FFmpeg的下载与编译" class="headerlink" title="FFmpeg的下载与编译"></a>FFmpeg的下载与编译</h1><p>输入以下参数进行下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b release/xx  https://git.ffmpeg.org/ffmpeg.git</span><br></pre></td></tr></table></figure><p>这边可以根据选择选择自己需要的ffmpeg版本</p><p>clone后的ffmpeg文件夹结构如下：</p><ul><li>libavcodec：用于各种类型声音&#x2F;图像编解码；</li><li>libavdevice：用于音视频数据采集和渲染等功能的设备相关;</li><li>libavfilter：包含多媒体处理常用的滤镜功能;</li><li>libavformat：包含多种多媒体容器格式的封装、解封装工具;</li><li>libavutil：包含一些公共的工具函数；</li><li>libpostproc：用于后期效果处理；</li><li>libswresample：用于音频重采样和格式转换等功能;</li><li>libswscale：用于视频场景比例缩放、色彩映射转换；</li></ul><p>接着进入ffmpeg文件夹，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/home/ws/Desktop/FFmpeg/4.2/FFmpeg4.2_debug/ --enable-shared --disable-optimizations --enable-debug --disable-x86asm --extra-cflags=-g --disable-stripping</span><br></pre></td></tr></table></figure><p>其中：</p><h2 id="prefix"><a href="#prefix" class="headerlink" title="prefix:"></a>prefix:</h2><p>生成的bin lib include share存放的位置</p><h2 id="shared"><a href="#shared" class="headerlink" title="shared:"></a>shared:</h2><p>ffmpeg生成的库一共有三个版本：static(静态库版本)、shared(动态库版本)、Dev(开发者版本)</p><ul><li>static: 里面只有3个应用程序：ffmpeg.exe，ffplay.exe，ffprobe.exe，每个exe的体积都很大，相关的Dll已经被编译到exe里面去了。作为工具而言此版本就可以满足我们的需求；</li><li>shared:里面除了3个应用程序：ffmpeg.exe，ffplay.exe，ffprobe.exe之外，还有一些Dll(或dylib或so)，比如说avcodec-54.dll之类的。shared里面的可执行程序体积很小，他们在运行的时候，到相应的Dll中调用功能。程序运行过程必须依赖于提供的dll文件；</li><li>dev:是用于开发的，里面包含了库文件xxx.lib以及头文件xxx.h，这个版本不包含exe文件。dev版本中include文件夹内文件用途</li></ul><h2 id="optimizations"><a href="#optimizations" class="headerlink" title="optimizations:"></a>optimizations:</h2><p>编译器优化，这个需要禁止</p><h2 id="debug"><a href="#debug" class="headerlink" title="debug:"></a>debug:</h2><p>是否生成可调试的ffmpeg</p><h2 id="x86asm"><a href="#x86asm" class="headerlink" title="x86asm:"></a>x86asm:</h2><p>独立x86程序集</p><h2 id="–extra-cflag"><a href="#–extra-cflag" class="headerlink" title="–extra-cflag:"></a>–extra-cflag:</h2><p>第三方库不在默认的include路径，则需要指定–extra-cflags&#x3D;-I&#x2F;xxxx&#x2F;include<br>extra-cflags的额外用法：比如–extra-cflags&#x3D;-Dxxx，-D的意思是宏，指的就是在编译的时候预定义了xxx这样的宏</p><h2 id="stripping"><a href="#stripping" class="headerlink" title="stripping:"></a>stripping:</h2><p>–disable-stripping：禁用剥离可执行文件和共享库</p><p>其他ffmpeg的相关配置参数具体含义，<a href="https://www.cnblogs.com/x_wukong/p/12746031.html">详见</a></p><p>等待configure检验完成后，接着输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure><p>如果想让编译的速度快一点可以查看一下电脑配置，通过make的-j命令（加速程序编译），比如我的电脑可以开到20</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j 20</span><br></pre></td></tr></table></figure><p>等待make运行结束后，再输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>此时，我们完成了FFmpeg的编译</p><h1 id="如何通过gdb调试ffmpeg"><a href="#如何通过gdb调试ffmpeg" class="headerlink" title="如何通过gdb调试ffmpeg"></a>如何通过gdb调试ffmpeg</h1><p>当我们完成FFmpeg后，我们可以在当前文件夹看到ffmpeg_g这个文件(带_g的就表示是可以调试的)<br>我们可以查看一下这个文件信息，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ffmpeg_g -version</span><br></pre></td></tr></table></figure><p>接着，运行gdb首，并指定ffmpeg_g作为调试程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb ./ffmpeg_g</span><br></pre></td></tr></table></figure><p>此时，我们可以验证一下是否可以调试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set args -version #设置运行参数linux 上使用 vscode debug ffmpeg ?</span><br><span class="line">b main #将断电打在main函数的入口处</span><br><span class="line">layout src #显示源码布局</span><br><span class="line">run #运行程序</span><br></pre></td></tr></table></figure><p>接着输入n后回车即可进行单步调试<br><img src="/./%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91%E5%8F%AF%E8%B0%83%E8%AF%95%E7%9A%84Debug%E7%89%88%E6%9C%ACFFmpeg%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87GDB%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/1.png"></p><p>在此，我们继续演示一下如何进行调试。输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb ./ffmpeg_g</span><br><span class="line">set args -i &#x27;/home/ws/Videos/1.mp4&#x27;  #获取mp4信息</span><br><span class="line">b main #将断电打在main函数的入口处</span><br><span class="line">layout src #显示源码布局</span><br><span class="line">run #运行程序</span><br></pre></td></tr></table></figure><p>gdb常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n #单步调试</span><br><span class="line">s #单步单步跟踪到函数内部</span><br><span class="line">continue #直接运行到下一个断点处</span><br><span class="line">u 行数 #运行到指定位置</span><br><span class="line">b #添加断点，可根据行数、函数名、条件进行断点设置</span><br><span class="line">info breakpoints #查看已设置断点</span><br><span class="line">p #打印基本类型变量，数组，字符数组</span><br><span class="line">l #打印源码</span><br></pre></td></tr></table></figure><p>具体可参考这篇<a href="https://zhuanlan.zhihu.com/p/74897601">文章</a></p><h1 id="如何在vscode调试ffmpeg"><a href="#如何在vscode调试ffmpeg" class="headerlink" title="如何在vscode调试ffmpeg"></a>如何在vscode调试ffmpeg</h1><p>首先cd到FFmpeg文件夹，然后在命令行输入以下命令打开vscode：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code . </span><br></pre></td></tr></table></figure><p>接着在VS Code中同时按下Ctrl + Shift + P打开输入”launch.json”。<br>如果没有这个选项的话，那就同时按下Ctrl + Shift + D，选择创建一个”launch.json”，点击Web app(Egd)<br><img src="/./%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91%E5%8F%AF%E8%B0%83%E8%AF%95%E7%9A%84Debug%E7%89%88%E6%9C%ACFFmpeg%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87GDB%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/2.png"></p><p>把下面这段话替换进行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc - 生成和调试活动文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/../ffmpeg_g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-version&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// &quot;preLaunchTask&quot;: &quot;C/C++: gcc 生成活动文件&quot;,</span></span><br><span class="line">        <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span> <span class="comment">// 配置类型，对于C/C++可认为此处只能是cppdbg，由cpptools提供；不et args -version #设置运行参数linux 上使用 vscode debug ffmpeg ?</span></span><br><span class="line">b main #将断电打在main函数的入口处</span><br><span class="line">layout src #显示源码布局</span><br><span class="line">run #运行程序同编程语言不同</span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span> <span class="comment">// 可以为launch（启动）或attach（附加）</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span> <span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span>    <span class="comment">// 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out</span></span><br><span class="line">            <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span>    <span class="comment">// 生成和调试有关的信息</span></span><br><span class="line">            <span class="string">&quot;-m64&quot;</span><span class="punctuation">,</span>  <span class="comment">// 不知为何有时会生成16位程序而无法运行，此条可强制生成64位的</span></span><br><span class="line">            <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启额外警告</span></span><br><span class="line">            <span class="string">&quot;-static-libgcc&quot;</span><span class="punctuation">,</span>     <span class="comment">// 静态链接libgcc，一般都会加上</span></span><br><span class="line">            <span class="string">&quot;-fexec-charset=GBK&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成的程序使用GBK编码，不加这条会导致Win下输出中文乱码；繁体系统改成BIG5</span></span><br><span class="line">            <span class="string">&quot;-D__USE_MINGW_ANSI_STDIO&quot;</span><span class="punctuation">,</span> <span class="comment">// 用MinGW写C时留着，否则不需要，用于支持printf的%zd和%Lf等</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 编译的命令，其实相当于VSC帮你在终端中输了这些东西</span></span><br><span class="line">        <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span> <span class="comment">// 调试程序时的工作目录，此为工作区文件夹；改成$&#123;fileDirname&#125;可变为文件所在目录</span></span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 环境变量ffmpeg_g器的内容，具体作用自行Google</span></span><br><span class="line">                <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Compile&quot;</span> <span class="comment">// 调试前执行的任务，一般为编译程序。与tasks.json的label相对应</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>保存退出后，我们打开想要调试的文件，以本次要调试的ffmpeg_g为例，打开fftools文件夹中的ffmpeg.c文件，并在4852行加上断点（鼠标挪到行号的左边会出现一个淡淡的小红点，点下之后会显示红点，代表你在本行打了一个断点）</p><p><font color =red>注：请安装如下2个VS Code插件：Cffmpeg_g&#x2F;C++、C&#x2F;C++ Runner</font></p><p>接下来可以点击上方的工具栏来执行相关调试操作，也可以使用快捷键来进行操作：<br>F5：继续执行<br>F10：单步跳过<br>F11：单步调试<br>Shift + F11：单步跳出<br>Shift + F5：停止调试</p><p>之后我们可以通过”args”: [“-version”],这个参数来调试ffmpeg</p><p>左边的DEBUG工具栏可以让你轻松地查看本地变量和寄存器，可以添加相关的变量监视，也可以查看函数的调用堆栈等信息。</p><p>再举个查看文件信息的例子，修改launch.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc - 生成和调试活动文件&quot;</span><span class="punctuation">,</span>ffmpeg_g</span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;/../ffmpeg_g&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-i&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;&#x27;/home/ws/Videos/1.mp4&#x27;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// &quot;preLaunchTask&quot;: &quot;C/C++: gcc 生成活动文件&quot;,</span></span><br><span class="line">      <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91%E5%8F%AF%E8%B0%83%E8%AF%95%E7%9A%84Debug%E7%89%88%E6%9C%ACFFmpeg%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87GDB%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/3.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于OpenGL的N卡硬件解码编码流程</title>
      <link href="/2022/10/24/%E5%9F%BA%E4%BA%8EOpenGL%E7%9A%84N%E5%8D%A1%E7%A1%AC%E4%BB%B6%E8%A7%A3%E7%A0%81%E7%BC%96%E7%A0%81%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/10/24/%E5%9F%BA%E4%BA%8EOpenGL%E7%9A%84N%E5%8D%A1%E7%A1%AC%E4%BB%B6%E8%A7%A3%E7%A0%81%E7%BC%96%E7%A0%81%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>现在我们通过FFmpeg来实现基于OpenGL的Nvida硬件解码和编码功能</p><h1 id="1-前期准备："><a href="#1-前期准备：" class="headerlink" title="1 前期准备："></a>1 前期准备：</h1><p>先阅读完Nvida的这个<a href="https://docs.nvidia.com/video-technologies/video-codec-sdk/ffmpeg-with-nvidia-gpu/index.html">文档</a></p><p>接着下载FFmpeg以及与Nvidia编解码器API接口所需的FFmpeg版本的标头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b release/xx  https://git.ffmpeg.org/ffmpeg.git</span><br><span class="line">git clone -b sdk/xx https://github.com/FFmpeg/nv-codec-headers.git</span><br></pre></td></tr></table></figure><p><a href="https://www.nvidia.com/Download/index.aspx?lang=en-us">下载对应的Nvida驱动程序</a></p><p><a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=20.04">下载CUDA Toolkit</a></p><p><a href="https://developer.nvidia.com/nvidia-video-codec-sdk/download">下载Nvida的Video_Codec_SDK</a></p><p>接着下载CUDA演示样例验证是否成功安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/NVIDIA/cuda-samples.git</span><br></pre></td></tr></table></figure><p>如果成功显示该画面就说明安装成功：<br><img src="/./%E5%9F%BA%E4%BA%8EOpenGL%E7%9A%84N%E5%8D%A1%E7%A1%AC%E4%BB%B6%E8%A7%A3%E7%A0%81%E7%BC%96%E7%A0%81%E6%B5%81%E7%A8%8B/CUDA%E6%BC%94%E7%A4%BA%E6%A0%B7%E4%BE%8B%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5.png"></p><p>接着可以用cmake工具构建一下Video_Codec_SDK里面的Samples，如果能成功构建，那么就代表CUDA Toolkit安装成功了。<br><img src="/./%E5%9F%BA%E4%BA%8EOpenGL%E7%9A%84N%E5%8D%A1%E7%A1%AC%E4%BB%B6%E8%A7%A3%E7%A0%81%E7%BC%96%E7%A0%81%E6%B5%81%E7%A8%8B/%E9%AA%8C%E8%AF%81CUDAToolkit%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p><h1 id="2-具体解码流程步骤"><a href="#2-具体解码流程步骤" class="headerlink" title="2 具体解码流程步骤"></a>2 具体解码流程步骤</h1><p>首先是硬件解码流程，具体过程如下所示：</p><ul><li>初始化设置</li><li>创建CUDA上下文</li><li>查询硬件解码器解码能力</li><li>创建解码器实例</li><li>使用第三方软件(如FFMPEG)进行Demux</li><li>使用第三方解析器(如FFMPEG)解析视频比特流</li><li>使用NVDECODE API启动解码</li><li>获取解码后的YUV进行进一步处理</li><li>查询解码帧状态</li><li>根据解码状态，使用解码后的输出进行进一步的处理(如渲染、后处理等)</li><li>如果应用程序需要显示输出：</li><li>a、将解码后的YUV转化为RGBA格式</li><li>b、将RGBA映射到DirectX或OpenGL纹理</li><li>c、将纹理绘制到屏幕上</li><li>在译码过程完成后销毁解码器实例</li><li>销毁CUDA上下文</li></ul><p>接下来先用低级的API来实现，我们用__CUDA_API_VERSION 4000的版本来进行演示（这个版本相对比较老，新版本的API跟这个可能存在部分区别，但是总体上来说高版本是兼容低版本的，因此区别不大）</p><h2 id="2-1-使用FFmpeg进行处理"><a href="#2-1-使用FFmpeg进行处理" class="headerlink" title="2.1 使用FFmpeg进行处理"></a>2.1 使用FFmpeg进行处理</h2><p>分为以下几个步骤：</p><ul><li>获取MediaInfo信息</li><li>创建解复用器</li><li>拿到额外数据信息</li><li>根据FourCC创建对应的硬件解码器</li><li>将其Seek到初始位置0</li></ul><h2 id="2-2-CUDA相关初始化设置"><a href="#2-2-CUDA相关初始化设置" class="headerlink" title="2.2 CUDA相关初始化设置"></a>2.2 CUDA相关初始化设置</h2><p>首先进行初始化，需要初始化的地方有三个：</p><ul><li>CUDA初始化</li><li>解码器初始化</li><li>显卡设备信息的获取以及显卡的选择</li></ul><h3 id="2-2-1-CUDA初始化"><a href="#2-2-1-CUDA初始化" class="headerlink" title="2.2.1 CUDA初始化"></a>2.2.1 CUDA初始化</h3><p>cuInit(unsigned int Flags, int cudaVersion, void *pHandleDriver,int dxtype);</p><p>在下载的nv-codec-headers的dynlink_cuda.cpp文件中定义</p><p>初始化驱动程序API，并且必须在驱动程序API的任何其他函数之前调用。如果不执行，则所有API都将返回错误，全局执行一次即可；</p><p>这个函数主要做两件事：</p><ul><li>调用cuDriverGetVersion函数得到此时设备的CudaVersion，从而针对性的进相关函数</li><li>通过设定的宏和输入参数dxtype，来确定是采用OpenGL还是哪个版本的DX</li></ul><p><font color =red>注：没有对应的cuDestroy，不需要释放，程序销毁自动释放；</font></p><h4 id="相关参数的具体含义："><a href="#相关参数的具体含义：" class="headerlink" title="相关参数的具体含义："></a>相关参数的具体含义：</h4><h5 id="Flags："><a href="#Flags：" class="headerlink" title="Flags："></a>Flags：</h5><p>目前，Flags参数必须为 0。如果尚未调用cuInit()，则驱动程序 API 中的任何函数都将返回CUDA_ERROR_NOT_INITIALIZED。</p><h5 id="cudaVersion："><a href="#cudaVersion：" class="headerlink" title="cudaVersion："></a>cudaVersion：</h5><p>这个值默认为0？不太清楚为什么为0</p><h5 id="pHandleDriver："><a href="#pHandleDriver：" class="headerlink" title="pHandleDriver："></a>pHandleDriver：</h5><p>CUDADRIVER cudadriver &#x3D; 0;<br>将cudadriver作为参数传递进去<br>######### dxtype：<br>该参数只在Win下调用DX的时候使用，如果用OpenGL的话，该参数无实际含义,只需记得打开INIT_CUDA_GL即可。</p><p>注意需要根据使用的DX类型和宏的开关与否进行参数设置。</p><p>可设置dxtype结构体为:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">D3DX_SUPPORT_TYPE</span></span><br><span class="line">&#123;</span><br><span class="line">    SUPPORT_D3D9EX,</span><br><span class="line">    SUPPORT_D3D10,</span><br><span class="line">    SUPPORT_D3D11,</span><br><span class="line">    SUPPORT_UNKOWN,</span><br><span class="line">&#125;;####</span><br></pre></td></tr></table></figure><p>通过宏和dxtype来针对性的进行初始化设置的具体代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> INIT_CUDA_GL</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cuInitGL</span>(<span class="number">0</span>, __CUDA_API_VERSION, CudaDrvLib) != CUDA_SUCCESS)</span><br><span class="line">        <span class="keyword">return</span> CUDA_ERROR_INVALID_DEVICE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> INIT_CUDA_D3D9</span></span><br><span class="line"><span class="keyword">if</span> (dxtype == <span class="number">0</span> &amp;&amp;  <span class="built_in">cuInitD3D9</span>(<span class="number">0</span>, __CUDA_API_VERSION, CudaDrvLib) != CUDA_SUCCESS)</span><br><span class="line">        <span class="keyword">return</span> CUDA_ERROR_INVALID_DEVICE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> INIT_CUDA_D3D10</span></span><br><span class="line"><span class="keyword">if</span> (dxtype == <span class="number">1</span> &amp;&amp; <span class="built_in">cuInitD3D10</span>(<span class="number">0</span>, __CUDA_API_VERSION, CudaDrvLib) != CUDA_SUCCESS)</span><br><span class="line">        <span class="keyword">return</span> CUDA_ERROR_INVALID_DEVICE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> INIT_CUDA_D3D11</span></span><br><span class="line"><span class="keyword">if</span> (dxtype == <span class="number">2</span> &amp;&amp; <span class="built_in">cuInitD3D11</span>(<span class="number">0</span>, __CUDA_API_VERSION, CudaDrvLib) != CUDA_SUCCESS)</span><br><span class="line">        <span class="keyword">return</span> CUDA_ERROR_INVALID_DEVICE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-初始化NVIDIA-GPU-设备提供视频解码接口"><a href="#2-2-2-初始化NVIDIA-GPU-设备提供视频解码接口" class="headerlink" title="2.2.2 初始化NVIDIA GPU 设备提供视频解码接口"></a>2.2.2 初始化NVIDIA GPU 设备提供视频解码接口</h3><p>cuvidInit(unsigned int Flags);<br>初始化解码器，Flags默认设置为0</p><h3 id="2-2-3-显卡设备信息的获取以及显卡的选择"><a href="#2-2-3-显卡设备信息的获取以及显卡的选择" class="headerlink" title="2.2.3 显卡设备信息的获取以及显卡的选择"></a>2.2.3 显卡设备信息的获取以及显卡的选择</h3><p>首先我们要知道设备有多少张显卡，通过cuDeviceGetCount(int *count)函数，得到设备的显卡数量。<br>具体API定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuDeviceGetCount</span><span class="params">(<span class="type">int</span> *count)</span></span>;</span><br><span class="line">tcuDeviceGetCount                     *cuDeviceGetCount;</span><br></pre></td></tr></table></figure><p>接着我们需要得到这些显卡的具体信息。</p><p>此时就用到cuDeviceGet和cuDeviceGetName函数；<br>其中cuDeviceGet通过for循环输入1～count来得到每张显卡设备的设备句柄：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcuDeviceGet                          *cuDeviceGet;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuDeviceGet</span><span class="params">(CUdevice *device, <span class="type">int</span> ordinal)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="相关参数的具体含义：-1"><a href="#相关参数的具体含义：-1" class="headerlink" title="相关参数的具体含义："></a>相关参数的具体含义：</h4><h5 id="device："><a href="#device：" class="headerlink" title="device："></a>device：</h5><p>设备句柄</p><h5 id="ordinal："><a href="#ordinal：" class="headerlink" title="ordinal："></a>ordinal：</h5><p>设备id号</p><p>cuDeviceGetName通过输入设备句柄得到每张显卡的名称</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuDeviceGetName</span><span class="params">(<span class="type">char</span> *name, <span class="type">int</span> len, CUdevice dev)</span></span>;</span><br><span class="line">tcuDeviceGetName                      *cuDeviceGetName;</span><br></pre></td></tr></table></figure><p>相关参数信息：</p><h5 id="dev："><a href="#dev：" class="headerlink" title="dev："></a>dev：</h5><p>设备句柄</p><h5 id="len："><a href="#len：" class="headerlink" title="len："></a>len：</h5><p>默认输入为256</p><p>然后调用helper_cuda_drvapi.h文件中的checkCudaCapabilitiesDRV函数，来进行CUDA GPU SM功能的常规检查</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">checkCudaCapabilitiesDRV</span>(<span class="type">int</span> major_version, <span class="type">int</span> minor_version, <span class="type">int</span> devID)</span><br></pre></td></tr></table></figure><p>Streaming Multiprocessor (SM)的具体含义参考这篇<a href="https://blog.csdn.net/asasasaababab/article/details/80447254">文章</a></p><p><font color = red>注：major_version和minor_version默认输入为1，若想了解checkCudaCapabilitiesDRV函数的具体实现，详见helper_cuda_drvapi.h文件。</font></p><p>最后调用cuDeviceGetAttribute来返回返回有关设备的信息。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuDeviceGetAttribute</span><span class="params">(<span class="type">int</span> *pi, CUdevice_attribute attrib, CUdevice dev)</span></span>;</span><br><span class="line">tcuDeviceGetAttribute           *cuDeviceGetAttribute;</span><br></pre></td></tr></table></figure><h4 id="相关参数的具体含义：-2"><a href="#相关参数的具体含义：-2" class="headerlink" title="相关参数的具体含义："></a>相关参数的具体含义：</h4><h5 id="pi"><a href="#pi" class="headerlink" title="pi:"></a>pi:</h5><p>返回设备属性值</p><h5 id="attrib"><a href="#attrib" class="headerlink" title="attrib:"></a>attrib:</h5><p>要查询的设备属性，详见dynlink_cuda_cuda.h文件的CUdevice_attribute_enum结构体内容</p><h5 id="dev"><a href="#dev" class="headerlink" title="dev:"></a>dev:</h5><p>设备句柄</p><hr><p>这里有个使用技巧，通过checkCUDADecodecErrors来接收各个API接口返回的CUresult值，从而查看是否成功调用各API接口。<br>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">checkCUDADecodecErrors</span>(<span class="built_in">cuDeviceGetAttribute</span>(xx,xx,xx)))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><hr><p>此时经过上面步骤后，我们已经成功获取到了每一张Nvida显卡设备的相关信息，紧接着我们就需要从中挑选出性能最好的一张来使用。</p><p>我们可以通过helper_cuda_drvapi.h文件的gpuGetMaxGflopsGLDeviceIdDRV函数，来挑选出最好的一张显卡。当我们调用<br>gpuGetMaxGflopsGLDeviceIdDRV()函数时，返回的值是最佳显卡的id值，此时我们再调用cuDeviceGet函数，将id值作为输入参数，即可得到该张显卡的设备句柄。</p><p>接着我们调用cuDeviceComputeCapability函数查看一下这张最佳显卡的算力情况，以及通过cuDeviceTotalMem返回设备上的内存总量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuDeviceComputeCapability</span><span class="params">(<span class="type">int</span> *major, <span class="type">int</span> *minor, CUdevice dev)</span></span>;</span><br><span class="line">tcuDeviceComputeCapability            *cuDeviceComputeCapability;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __CUDA_API_VERSION &gt;= 3020</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuDeviceTotalMem</span><span class="params">(<span class="type">size_t</span> *bytes, CUdevice dev)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuDeviceTotalMem</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *bytes, CUdevice dev)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">tcuDeviceTotalMem                     *cuDeviceTotalMem;</span><br></pre></td></tr></table></figure><h4 id="相关参数的具体设置："><a href="#相关参数的具体设置：" class="headerlink" title="相关参数的具体设置："></a>相关参数的具体设置：</h4><h5 id="major、minor：："><a href="#major、minor：：" class="headerlink" title="major、minor：："></a>major、minor：：</h5><p>在major和minor中返回定义设备dev计算能力的主要和次要修订号</p><h5 id="dev：-1"><a href="#dev：-1" class="headerlink" title="dev："></a>dev：</h5><p>设备句柄</p><h2 id="2-3-创建CUDA上下文"><a href="#2-3-创建CUDA上下文" class="headerlink" title="2.3 创建CUDA上下文"></a>2.3 创建CUDA上下文</h2><p>我们需要将这张显卡与OpenGL的互操作性创建CUDA上下文，此时调用cuGLCtxCreate函数进行最终的CUDA上下文的创建</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult CUDAAPI <span class="title">tcuGLCtxCreate</span><span class="params">(CUcontext *pCtx, <span class="type">unsigned</span> <span class="type">int</span> Flags, CUdevice device)</span></span>;</span><br><span class="line">tcuGLCtxCreate                        *cuGLCtxCreate;</span><br></pre></td></tr></table></figure><h4 id="相关参数的具体设置：-1"><a href="#相关参数的具体设置：-1" class="headerlink" title="相关参数的具体设置："></a>相关参数的具体设置：</h4><h5 id="pCtx："><a href="#pCtx：" class="headerlink" title="pCtx："></a>pCtx：</h5><p>返回所创建的CUDA上下文</p><h5 id="Flags：-1"><a href="#Flags：-1" class="headerlink" title="Flags："></a>Flags：</h5><p>CUDA 上下文创建选项，默认输入：CU_CTX_SCHED_BLOCKING_SYNC</p><h5 id="CUdevice："><a href="#CUdevice：" class="headerlink" title="CUdevice："></a>CUdevice：</h5><p>创建的上下文的设备句柄</p><p>接着从当前CPU线程中弹出当前CUDA上下文，看一下是否已经成功创建了，如果成功的话，我们再将其push进去。</p><p>cuCtxPushCurrent():将给定的上下文ctx推送到CPU线程的当前上下文堆栈中。指定的上下文成为CPU线程的当前上下文，因此所有对当前上下文进行操作的CUDA函数都会受到影响。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuCtxPopCurrent</span><span class="params">(CUcontext *pctx)</span></span>;</span><br><span class="line">tcuCtxPopCurrent                      *cuCtxPopCurrent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult  CUDAAPI <span class="title">tcuCtxPushCurrent</span><span class="params">(CUcontext ctx)</span></span>;</span><br><span class="line">tcuCtxPushCurrent                     *cuCtxPushCurrent;</span><br></pre></td></tr></table></figure><p>然后我们通过cuMemGetInfo函数得到可用内存和总内存（以字节为单位）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult CUDAAPI <span class="title">tcuMemGetInfo</span><span class="params">(<span class="type">size_t</span> *free, <span class="type">size_t</span> *total)</span></span>;</span><br><span class="line">tcuMemGetInfo                         *cuMemGetInfo;</span><br></pre></td></tr></table></figure><p>在total中返回当前上下文可用的内存总量。在free中返回设备上根据操作系统空闲的内存量。不保证 CUDA 能够分配操作系统报告为空闲的所有内存。在多原则的情况下，返回的空闲估计容易出现竞争条件，在估计和报告空闲内存之间由不同进程或同一进程中的不同线程完成的新分配&#x2F;释放，将导致偏差报告的可用值和实际可用内存。</p><p>Tegra 上的集成 GPU 与 CPU 和 SoC 的其他组件共享内存。API 返回的可用值和总值不包括某些平台上操作系统维护的 SWAP 内存空间。当 GPU 或 CPU 分配或访问内存时，操作系统可能会将一些内存页面移动到交换区域。请参阅 Tegra 应用说明，了解如何计算 Tegra 上的总内存和可用内存。</p><p>当满足可用内存不小于300<em>1024</em>1024，总内存不小于512 <em>1024</em>1024时，我们认为此时是足够用的（这边可以用if语句来判断，满足则返回true，不满足则返回false）。</p><p>此时为了为了方便多线程实现，我们调用dynlink_nvcuvid.cpp中的cuvidCtxLockCreate函数来进行上下文的锁定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult CUDAAPI <span class="title">tcuvidCtxLockCreate</span><span class="params">(CUvideoctxlock *pLock, CUcontext ctx)</span></span>;</span><br><span class="line">tcuvidCtxLockCreate                   *cuvidCtxLockCreate;</span><br></pre></td></tr></table></figure><h2 id="2-4-创建解码器实例"><a href="#2-4-创建解码器实例" class="headerlink" title="2.4 创建解码器实例"></a>2.4 创建解码器实例</h2><p>分为两个部分：</p><ul><li>CUVIDDECODECREATEINFO信息的获取</li><li>解码器的创建</li></ul><h3 id="2-4-1-CUVIDDECODECREATEINFO信息的获取"><a href="#2-4-1-CUVIDDECODECREATEINFO信息的获取" class="headerlink" title="2.4.1 CUVIDDECODECREATEINFO信息的获取"></a>2.4.1 CUVIDDECODECREATEINFO信息的获取</h3><p>首先我们需要进行CUVIDDECODECREATEINFO信息的填充。CUVIDDECODECREATEINFO结构如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* \struct CUVIDDECODECREATEINFO</span></span><br><span class="line"><span class="comment">* Struct used in create decoder</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CUVIDDECODECREATEINFO</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulWidth;              <span class="comment">/**&lt; Coded Sequence Width */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulHeight;             <span class="comment">/**&lt; Coded Sequence Height */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulNumDecodeSurfaces;  <span class="comment">/**&lt; Maximum number of internal decode surfaces */</span></span><br><span class="line">    cudaVideoCodec CodecType;           <span class="comment">/**&lt; cudaVideoCodec_XXX */</span></span><br><span class="line">    cudaVideoChromaFormat ChromaFormat; <span class="comment">/**&lt; cudaVideoChromaFormat_XXX (only 4:2:0 is currently supported) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulCreationFlags;      <span class="comment">/**&lt; Decoder creation flags (cudaVideoCreateFlags_XXX解析器的创建;         /**&lt; Reserved for future use - set to zero */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * area of the frame that should be displayed</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="type">short</span> left;</span><br><span class="line">        <span class="type">short</span> top;</span><br><span class="line">        <span class="type">short</span> right;</span><br><span class="line">        <span class="type">short</span> bottom;</span><br><span class="line">    &#125; display_area;</span><br><span class="line">    cudaVideoSurfaceFormat OutputFormat;       <span class="comment">/**&lt; cudaVideoSurfaceFormat_XXX */</span></span><br><span class="line">    cudaVideoDeinterlaceMode DeinterlaceMode;  <span class="comment">/**&lt; cudaVideoDeinterlaceMode_XXX */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulTargetWidth;               <span class="comment">/**&lt; Post-processed Output Width (Should be aligned to 2) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulTargetHeight;              <span class="comment">/**&lt; Post-processed Output Height (Should be aligbed to 2) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ulNumOutputSurfaces;         <span class="comment">/**&lt; Maximum number of output surfaces simultaneously mapped */</span></span><br><span class="line">    CUvideoctxlock vidLock;                    <span class="comment">/**&lt; If non-NULL, context lock used for synchronizing ownership of the cuda context */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * target rectangle in the output frame (for aspect ratio conversion)</span></span><br><span class="line"><span class="comment">    * if a null rectangle is specified, &#123;0,0,ulTargetWidth,ulTargetHeight&#125; will be used</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="type">short</span> left;</span><br><span class="line">        <span class="type">short</span> top;</span><br><span class="line">        <span class="type">short</span> right;</span><br><span class="line">        <span class="type">short</span> bottom;</span><br><span class="line">    &#125; target_rect;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> Reserved2[<span class="number">5</span>];                <span class="comment">/**&lt; Reserved for future use - set to zero */</span></span><br><span class="line">&#125; CUVIDDECODECREATEINFO;</span><br></pre></td></tr></table></figure><h4 id="相关参数具体设置："><a href="#相关参数具体设置：" class="headerlink" title="相关参数具体设置："></a>相关参数具体设置：</h4><h5 id="ulWidth、ulHeight："><a href="#ulWidth、ulHeight：" class="headerlink" title="ulWidth、ulHeight："></a>ulWidth、ulHeight：</h5><p>通过解码得到的视频流信息来获取，与视频文件的宽高保持一致</p><h5 id="ulNumDecodeSurfaces："><a href="#ulNumDecodeSurfaces：" class="headerlink" title="ulNumDecodeSurfaces："></a>ulNumDecodeSurfaces：</h5><p>默认值为：MAX_FRAME_COUNT</p><h5 id="CodecType："><a href="#CodecType：" class="headerlink" title="CodecType："></a>CodecType：</h5><p>CodecType需要根据文件的FourCC来进行确认。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* \enum cudaVideoCodec</span></span><br><span class="line"><span class="comment">* Video Codec Enums</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">cudaVideoCodec_enum</span> &#123;</span><br><span class="line">    cudaVideoCodec_MPEG1=<span class="number">0</span>,                 <span class="comment">/**&lt;  MPEG1   */</span></span><br><span class="line">    cudaVideoCodec_MPEG2, <span class="number">4</span>                  <span class="comment">/**&lt;  HEVC   */</span></span><br><span class="line">    cudaVideoCodec_VP8,                     <span class="comment">/**&lt;  VP8   */</span></span><br><span class="line">    cudaVideoCodec_VP9,                     <span class="comment">/**&lt;  VP9   */</span></span><br><span class="line">    cudaVideoCodec_NumCodecs,               <span class="comment">/**&lt;  Max COdecs   */</span></span><br><span class="line">    <span class="comment">// Uncompressed YUV</span></span><br><span class="line">    cudaVideoCodec_YUV420 = ((<span class="string">&#x27;I&#x27;</span>&lt;&lt;<span class="number">24</span>)|(<span class="string">&#x27;Y&#x27;</span>&lt;&lt;<span class="number">16</span>)|(<span class="string">&#x27;U&#x27;</span>&lt;&lt;<span class="number">8</span>)|(<span class="string">&#x27;V&#x27;</span>)),   <span class="comment">/**&lt; Y,U,V (4:2:0)  */</span></span><br><span class="line">    cudaVideoCodec_YV12   = ((<span class="string">&#x27;Y&#x27;</span>&lt;&lt;<span class="number">24</span>)|(<span class="string">&#x27;V&#x27;</span>&lt;&lt;<span class="number">16</span>)|(<span class="string">&#x27;1&#x27;</span>&lt;&lt;<span class="number">8</span>)|(<span class="string">&#x27;2&#x27;</span>)),   <span class="comment">/**&lt; Y,V,U (4:2:0)  */</span></span><br><span class="line">    cudaVideoCodec_NV12   = ((<span class="string">&#x27;N&#x27;</span>&lt;&lt;<span class="number">24</span>)|(<span class="string">&#x27;V&#x27;</span>&lt;&lt;<span class="number">16</span>)|(<span class="string">&#x27;1&#x27;</span>&lt;&lt;<span class="number">8</span>)|(<span class="string">&#x27;2&#x27;</span>)),   <span class="comment">/**&lt; Y,UV  (4:2:0)  */</span></span><br><span class="line">    cudaVideoCodec_YUYV   = ((<span class="string">&#x27;Y&#x27;</span>&lt;&lt;<span class="number">24</span>)|(<span class="string">&#x27;U&#x27;</span>&lt;&lt;<span class="number">16</span>)|(<span class="string">&#x27;Y&#x27;</span>&lt;&lt;<span class="number">8</span>)|(<span class="string">&#x27;V&#x27;</span>)),   <span class="comment">/**&lt; YUYV/YUY2 (4:2:2)  */</span></span><br><span class="line">    cudaVideoCodec_UYVY   = ((<span class="string">&#x27;U&#x27;</span>&lt;&lt;<span class="number">24</span>)|(<span class="string">&#x27;Y&#x27;</span>&lt;&lt;<span class="number">16</span>)|(<span class="string">&#x27;V&#x27;</span>&lt;&lt;<span class="number">8</span>)|(<span class="string">&#x27;Y&#x27;</span>))    <span class="comment">/**&lt; UYVY (4:2:2)  */</span></span><br><span class="line">&#125; cudaVideoCodec;</span><br></pre></td></tr></table></figure><p>我们一般只需要通过FourCC来区分Cuda支持的这四种解码类型：</p><ul><li>H264（FourCC:’462H’、’462T’、’462X’、’ CVA’、’1CVA’、’1cva’）</li><li>H265（FourCC:’2VPM’）</li><li>MPEG2（FourCC:’CVEH’）</li><li>VP9（FourCC:’ 9PV’）</li></ul><p>其余的根据实际应用场景也可以进行适当的增加。</p><h5 id="ChromaFormat："><a href="#ChromaFormat：" class="headerlink" title="ChromaFormat："></a>ChromaFormat：</h5><p>默认设置为：cudaVideoChromaFormat_420</p><h5 id="ulCreationFlags："><a href="#ulCreationFlags：" class="headerlink" title="ulCreationFlags："></a>ulCreationFlags：</h5><p>默认设置为：cudaVideoCreate_PreferCUVID</p><p>接下来是CUVIDDECODECREATEINFO内一些输出格式的相关参数设置</p><h5 id="OutputFormat："><a href="#OutputFormat：" class="headerlink" title="OutputFormat："></a>OutputFormat：</h5><p>默认设置为：cudaVideoSurfaceFoCreatOpenGLTextruermat_NV12</p><h5 id="DeinterlaceMode："><a href="#DeinterlaceMode：" class="headerlink" title="DeinterlaceMode："></a>DeinterlaceMode：</h5><p>默认设置为：cudaVideoDeinterlaceMode_Weave</p><h5 id="bitDepthMinus8："><a href="#bitDepthMinus8：" class="headerlink" title="bitDepthMinus8："></a>bitDepthMinus8：</h5><p>该参数需要根据文件的bitdepth来进行设置。<br>如果不小30,设置为2,否则设置为0</p><h5 id="ulTargetWidth，ulTargetHeight："><a href="#ulTargetWidth，ulTargetHeight：" class="headerlink" title="ulTargetWidth，ulTargetHeight："></a>ulTargetWidth，ulTargetHeight：</h5><p>ulTargetWidth，ulTargetHeight与ulWidth、ulHeight的值一致<br>即：ulTargetWidth &#x3D; ulWidth；ulTargetWidth &#x3D; ulHeight；</p><h5 id="ulNumOutputSurfaces："><a href="#ulNumOutputSurfaces：" class="headerlink" title="ulNumOutputSurfaces："></a>ulNumOutputSurfaces：</h5><p>默认为2</p><h5 id="vidLock："><a href="#vidLock：" class="headerlink" title="vidLock："></a>vidLock：</h5><p>该参数值为之前调用cuvidCtxLockCreate函数得到的pLock</p><h4 id="target-rect"><a href="#target-rect" class="headerlink" title="target_rect:"></a>target_rect:</h4><p>arget_rect.left &#x3D; 0;<br>target_rect.top &#x3D; 0;<br>target_rect.right &#x3D; ulWidth;<br>target_rect.bottom &#x3D; ulHeight;</p><p><a href="https://www.ffmpeg.org/doxygen/3.3/structCUVIDDECODECREATEINFO.html">CUVIDDECODECREATEINFO 结构参考</a></p><h3 id="2-4-2-创建CU视频解码器"><a href="#2-4-2-创建CU视频解码器" class="headerlink" title="2.4.2 创建CU视频解码器"></a>2.4.2 创建CU视频解码器</h3><p>然后调用cuvidCreateDecoder进行解码器的创建</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult CUDAAPI <span class="title">tcuvidCreateDecoder</span><span class="params">(CUvideodecoder *phDecoder, CUVIDDECODECREATEINFO *pdci)</span></span>;</span><br><span class="line">tcuvidCreateDecoder                   *cuvidCreateDecoder;</span><br></pre></td></tr></table></figure><h2 id="2-5-创建CU解析器"><a href="#2-5-创建CU解析器" class="headerlink" title="2.5 创建CU解析器"></a>2.5 创建CU解析器</h2><p>分为两个部分：</p><ul><li>CUVIDPARSERPARAMS信息的获取</li><li>解析器的创建</li></ul><h3 id="2-5-1-CUVIDPARSERPARAMS信息的获取"><a href="#2-5-1-CUVIDPARSERPARAMS信息的获取" class="headerlink" title="2.5.1 CUVIDPARSERPARAMS信息的获取"></a>2.5.1 CUVIDPARSERPARAMS信息的获取</h3><p>首先创建一个CUVIDPARSERPARAMS类型的变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dynlink_nvcuvid.h文件中定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CUVIDPARSERPARAMS</span></span><br><span class="line">&#123;</span><br><span class="line">    cudaVideoCodec CodecType;               <span class="comment">/**&lt; cudaVideoCodec_XXX  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ulMaxNumDecodeSurfaces;    <span class="comment">/**&lt; Max # of decode surfaces (parser will cycle through these) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ulClockRate;               <span class="comment">/**&lt; Timestamp units in Hz (0=default=10000000Hz) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ulErrorThreshold;          <span class="comment">/**&lt; % Error threshold (0-100) for calling pfnDecodePicture (100=always call pfnDecodePicture even if picture bitstream is fully corrupted) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ulMaxDisplayDelay;         <span class="comment">/**&lt; Max display queue delay (improves pipelining of decode with display) - 0=no delay (recommended values: 2..4) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> uReserved1[<span class="number">5</span>];             <span class="comment">/**&lt; Reserved for future use - set to 0 */</span></span><br><span class="line">    <span class="type">void</span> *pUserData;                        <span class="comment">/**&lt; User data for callbacks */</span></span><br><span class="line">    PFNVIDSEQUENCECALLBACK pfnSequenceCallback; <span class="comment">/**&lt; Called before decoding frames and/or whenever there is a format change */</span></span><br><span class="line">    PFNVIDDECODECALLBACK pfnDecodePicture;      <span class="comment">/**&lt; Called when a picture is ready to be decoded (decode order) */</span></span><br><span class="line">    PFNVIDDISPLAYCALLBACK pfnDisplayPicture;    <span class="comment">/**&lt; Called whenever a picture is ready to be displayed (display order)  */</span></span><br><span class="line">    <span class="type">void</span> *pvReserved2[<span class="number">7</span>];                       <span class="comment">/**&lt; Reserved for future use - set to NULL */</span></span><br><span class="line">    CUVIDEOFORMATEX *pExtVideoInfo;             <span class="comment">/**&lt; [Optional] sequence header data from system layer */</span></span><br><span class="line">&#125; CUVIDPARSERPARAMS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parser callbacks</span></span><br><span class="line"><span class="comment">// The parser will call these synchronously from within cuvidParseVideoData(), whenever a picture is ready to</span></span><br><span class="line"><span class="comment">// be decoded and/or displayed.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(CUDAAPI *PFNVIDSEQUENCECALLBACK)</span><span class="params">(<span class="type">void</span> *, CUVIDEOFORMAT *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(CUDAAPI *PFNVIDDECODECALLBACK)</span><span class="params">(<span class="type">void</span> *, CUVIDPICPARAMS *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(CUDAAPI *PFNVIDDISPLAYCALLBACK)</span><span class="params">(<span class="type">void</span> *, CUVIDPARSERDISPINFO *)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相关参数具体设置：-1"><a href="#相关参数具体设置：-1" class="headerlink" title="相关参数具体设置："></a>相关参数具体设置：</h4><h5 id="CodecType"><a href="#CodecType" class="headerlink" title="CodecType"></a>CodecType</h5><p>与前面的CUVIDDECODECREATEINFO中的CodecType保持一致</p><h5 id="ulMaxNumDecodeSurfaces"><a href="#ulMaxNumDecodeSurfaces" class="headerlink" title="ulMaxNumDecodeSurfaces"></a>ulMaxNumDecodeSurfaces</h5><p>与前面的CUVIDDECODECREATEINFO中的ulNumDecodeSurfaces保持一致</p><h5 id="ulClockRate："><a href="#ulClockRate：" class="headerlink" title="ulClockRate："></a>ulClockRate：</h5><p>默认为0</p><h5 id="ulErrorThreshold"><a href="#ulErrorThreshold" class="headerlink" title="ulErrorThreshold"></a>ulErrorThreshold</h5><p>默认为0</p><h5 id="ulMaxDisplayDelay"><a href="#ulMaxDisplayDelay" class="headerlink" title="ulMaxDisplayDelay"></a>ulMaxDisplayDelay</h5><p>默认为2</p><h5 id="uReserved1-5"><a href="#uReserved1-5" class="headerlink" title="uReserved1[5]"></a>uReserved1[5]</h5><p>默认全为0</p><h5 id="pUserData"><a href="#pUserData" class="headerlink" title="pUserData"></a>pUserData</h5><p>回调函数</p><h5 id="pfnSequenceCallback"><a href="#pfnSequenceCallback" class="headerlink" title="pfnSequenceCallback"></a>pfnSequenceCallback</h5><p>pfnSequenceCallback是parser解析到序列及图像参数信息时的回调函数，其传入的参数是parser解析好的视频参数，可以用于初始化解码器或重置解码器。</p><h5 id="pfnDecodePicture"><a href="#pfnDecodePicture" class="headerlink" title="pfnDecodePicture"></a>pfnDecodePicture</h5><p>pfnDecodePicture是parser解析到视频编码数据后的回调函数，其传入的参数parser处理好待解码的视频编码数据，需要在该函数中调用decoder的接口进行解码操作。</p><h5 id="pfnDisplayPicture"><a href="#pfnDisplayPicture" class="headerlink" title="pfnDisplayPicture"></a>pfnDisplayPicture</h5><p>pfnDisplayPicture是parser对解码后的数据处理的回调函数，可以在该回调中对已解码的数据进行获取（从显存到系统内存）并处理。</p><h5 id="pvReserved2"><a href="#pvReserved2" class="headerlink" title="pvReserved2"></a>pvReserved2</h5><p>默认为0</p><h5 id="pExtVideoInfo"><a href="#pExtVideoInfo" class="headerlink" title="pExtVideoInfo"></a>pExtVideoInfo</h5><p>默认为NULL</p><h3 id="2-5-2-解析器的创建"><a href="#2-5-2-解析器的创建" class="headerlink" title="2.5.2 解析器的创建"></a>2.5.2 解析器的创建</h3><p>最后调用cuvidCreateVideoParser函数，将CUVIDPARSERPARAMS作为输入参数，进行解析器的创建。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult CUDAAPI <span class="title">tcuvidCreateVideoParser</span><span class="params">(CUvideoparser *pObj, CUVIDPARSERPARAMS *pParams)</span></span>;</span><br><span class="line">tcuvidCreateVideoParser               *cuvidCreateVideoParser;</span><br></pre></td></tr></table></figure><p>分别定义一个CUVIDEOFORMATEX和CUVIDSOURCEDATAPACKET结构体类型的变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含原始序列头信息的视频格式</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    CUVIDEOFORMAT format;<span class="comment">//Video format</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> raw_seqhdr_data[<span class="number">1024</span>];</span><br><span class="line">&#125; CUVIDEOFORMATEX;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相关参数具体设置：-2"><a href="#相关参数具体设置：-2" class="headerlink" title="相关参数具体设置："></a>相关参数具体设置：</h4><p>首先使用memset函数将结构体初始化（全置为0）</p><h5 id="format："><a href="#format：" class="headerlink" title="format："></a>format：</h5><p>只需要设置format.seqhdr_data_length ，值等于额外数据的长度</p><h5 id="raw-seqhdr-data："><a href="#raw-seqhdr-data：" class="headerlink" title="raw_seqhdr_data："></a>raw_seqhdr_data：</h5><p>通过memcpy将额外数据copy到raw_seqhdr_data中，长度为seqhdr_data_length<br>即：memcpy(CuVideoFormatEx.raw_seqhdr_data, exdata, exdataLen);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CUVIDSOURCEDATAPACKET</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flags;            <span class="comment">/**&lt; Combination of CUVID_PKT_XXX flags */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> payload_size;     <span class="comment">/**&lt; number of bytes in the payload (may be zero if EOS flag is set) */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *payload;   <span class="comment">/**&lt; Pointer to packet payload data (may be NULL if EOS flag is set) */</span></span><br><span class="line">    CUvideotimestamp timestamp;     <span class="comment">/**&lt; Presentation timestamp (10MHz clock), only valid if CUVID_PKT_TIMESTAMP flag is set */</span></span><br><span class="line">&#125; CUVIDSOURCEDATAPACKET;</span><br></pre></td></tr></table></figure><h4 id="相关参数具体设置：-3"><a href="#相关参数具体设置：-3" class="headerlink" title="相关参数具体设置："></a>相关参数具体设置：</h4><p>首先使用memset函数将结构体初始化（全置为0）</p><h5 id="flags："><a href="#flags：" class="headerlink" title="flags："></a>flags：</h5><p>默认为0</p><h5 id="payload-size"><a href="#payload-size" class="headerlink" title="payload_size"></a>payload_size</h5><p>payload_size等于等于之前CUVIDEOFORMATEX结构体中format.seqhdr_data_length的值</p><h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><p>payload等于之前CUVIDEOFORMATEX结构体中raw_seqhdr_data的值</p><h5 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h5><p>默认为0</p><p>接着我们通过调用cuvidParseVideoData从解复用器提取数据包</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> CUresult CUDAAPI <span class="title">tcuvidParseVideoData</span><span class="params">(CUvideoparser obj, CUVIDSOURCEDATAPACKET *pPacket)</span></span>;</span><br><span class="line">tcuvidParseVideoData                  *cuvidParseVideoData;</span><br></pre></td></tr></table></figure><p>提取成功后，紧接着调用cuCtxPopCurrent函数，将给定的上下文ctx从当前CPU线程的上下文堆栈中弹出。</p><h2 id="创建OpenGL帧"><a href="#创建OpenGL帧" class="headerlink" title="创建OpenGL帧"></a>创建OpenGL帧</h2><p>由于我们的数据是NV12格式的（NV12格式的UV数据是交织存储的），因此我们在创建OpenGL纹理的时候，可以创建两张纹理，第一张存储Y数据，第二张纹理存储UV数据。具体代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreatOpenGLTextrue</span>()&#123;</span><br><span class="line">GLuint tex_nv12[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">glGenTextures</span>(<span class="number">2</span>, tex_nv12);<span class="comment">//生成两个纹理索引</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一张纹理</span></span><br><span class="line"><span class="comment">//------- 加载y数据纹理 -------</span></span><br><span class="line"><span class="built_in">glActiveTexture</span>(GL_TEXTURE0);  <span class="comment">// 在绑定纹理之前先激活纹理单元</span></span><br><span class="line"><span class="built_in">glBindTexture</span>(GL_TEXTURE_2D, tex_nv12[<span class="number">0</span>]); <span class="comment">//绑定y分量纹理对象id到激活的纹理单元</span></span><br><span class="line"><span class="comment">//使用内存中的数据创建真正的y分量纹理数据</span></span><br><span class="line"><span class="comment">//使用GL_red表示单通道</span></span><br><span class="line"><span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="number">0</span>, GL_RED, width, height, <span class="number">0</span>, GL_RED, GL_UNSIGNED_BYTE, frame-&gt;video.y);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二张纹理</span></span><br><span class="line"><span class="comment">//------- 加载uv数据纹理 -------</span></span><br><span class="line"><span class="built_in">glActiveTexture</span>(GL_TEXTURE1); <span class="comment">//激活纹理单元GL_TEXTURE1</span></span><br><span class="line"><span class="built_in">glBindTexture</span>(GL_TEXTURE_2D, tex_nv12[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//使用内存中的数据创建真正的u分量纹理数据</span></span><br><span class="line"><span class="built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="number">0</span>, GL_RED, width &gt;&gt; <span class="number">1</span>, height &gt;&gt; <span class="number">1</span>, <span class="number">0</span>, GL_RED, GL_UNSIGNED_BYTE, frame-&gt;video.u);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</span><br><span class="line"><span class="built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</span><br><span class="line"><span class="built_in">glUseProgram</span>(<span class="number">0</span>);<span class="comment">//安装一个程序对象作为当前渲染状态的一部分。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了效率的最大化，我们可以通过STL中的queue创建一个存储帧数据的队列。然后用for循环来创建多个帧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = MaxFrameNum; i &gt; <span class="number">0</span>; i--)&#123;<span class="comment">//MaxFrameNum可以设置为3～5</span></span><br><span class="line">    MEDIA_FRAME* VideoFrame = <span class="built_in">CreateVideoFrame</span>();</span><br><span class="line">    QueueVideoFrameBuffer.<span class="built_in">push</span>(VideoFrame);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MEDIA_FRAME* <span class="title">CreateVideoFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">CreatOpenGLTextrue</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纹理创建完成后，我们可以开始加载着色器程序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用着色器程序，返回采样器的序号</span></span><br><span class="line"><span class="type">int</span> shaderProgram = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">glUseProgram</span>(shaderProgram);<span class="comment">//该语句必须要有；安装 指定着色器程序</span></span><br><span class="line">Y = <span class="built_in">glGetUniformLocation</span>(shaderProgram, <span class="string">&quot;dataY&quot;</span>);</span><br><span class="line">UV = <span class="built_in">glGetUniformLocation</span>(shaderProgram, <span class="string">&quot;dataUV&quot;</span>);</span><br><span class="line"><span class="comment">//指定y纹理要使用新值,只能用0,1,2等表示纹理单元的索引，这是OpenGL不人性化的地方</span></span><br><span class="line"><span class="built_in">glUniform1i</span>(texUniformY, <span class="number">0</span>);<span class="comment">//0对应纹理单元GL_TEXTURE0,//指定y纹理要使用新值</span></span><br><span class="line"><span class="built_in">glUniform1i</span>(texUniformU, <span class="number">1</span>);<span class="comment">//1对应纹理单元GL_TEXTURE1,//指定uv纹理要使用新值</span></span><br></pre></td></tr></table></figure><h2 id="将NV12数据映射到OpenGL纹理上"><a href="#将NV12数据映射到OpenGL纹理上" class="headerlink" title="将NV12数据映射到OpenGL纹理上"></a>将NV12数据映射到OpenGL纹理上</h2><p>未完待续！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg文件IO操作</title>
      <link href="/2022/10/04/FFmpeg%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/10/04/FFmpeg%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>简单介绍一下如何使用FFmpeg进行文件IO操作，从操作文件和操作目录两个层面讲起，首先是文件的相关操作。</p><h2 id="文件的删除与重命名"><a href="#文件的删除与重命名" class="headerlink" title="文件的删除与重命名"></a>文件的删除与重命名</h2><ul><li>avpriv_io_delete()</li><li>avpriv_io_move()</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例子1：删除文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//delete url</span></span><br><span class="line">    <span class="type">int</span> ret = avpriv_io_delete(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Failed to delete a.txt\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;Success to delete a.txt \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子2：文件重命名</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    ret = avpriv_io_move(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;2.txt&quot;</span>);<span class="comment">//avpriv_io_move(src, dst)；</span></span><br><span class="line">    <span class="keyword">if</span>(ret&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Failed to rename \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;Success to rename \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令行窗口输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -g -o ffmpeg_del ffmpeg_file.c `pkg-config --cflags  --libs libavutil libavformat `</span><br></pre></td></tr></table></figure><p>如果出现该报错：<br><img src="/./FFmpeg%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C/1.png"></p><p>说明你现在安装的FFmpeg是最新版本的，没有这个函数，年可以选择切换成4.x版本的FFmpeg重新进行编译</p><p>这里我们切换到4.2版本演示一下，因为之前是通过git clone的方式下载代码的，因此可以直接用git命令切换到4.2版本的release分支上重新进行编译，你也可以重新git clone <a href="https://github.com/FFmpeg/FFmpeg.git">https://github.com/FFmpeg/FFmpeg.git</a><br>代码下来切换分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout release/4.2</span><br></pre></td></tr></table></figure><p>git branch查看切换完成后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --cc=/usr/bin/clang --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libmp3lame --enable-libx265  --enable-filter=delogo --enable-debug --disable-optimizations --enable-libspeex --enable-videotoolbox --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --host-cflags= --host-ldflags=</span><br></pre></td></tr></table></figure><p>如果出现报错，请根据<a href="https://wujianqiangcode.github.io/2022/10/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/">这篇文章</a>进行修改。</p><p>接着输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>此时回到之前的位置，继续输入命令即可完成编译<br><img src="/./FFmpeg%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C/2.png"></p><h2 id="操作目录到重要函数"><a href="#操作目录到重要函数" class="headerlink" title="操作目录到重要函数"></a>操作目录到重要函数</h2><ul><li>avio_open_dir()</li><li>avio_read_dir()</li><li>avio_close_dir()</li></ul><h3 id="操作目录到重要结构体"><a href="#操作目录到重要结构体" class="headerlink" title="操作目录到重要结构体"></a>操作目录到重要结构体</h3><ul><li>AVIODirContext：操作目录到上下文，存储例如打开的是哪个目录之类的信息，串联作用，作为输入参数来传递给后续要进行的操作函数。实际上我们在调用avio_open_dir()函数后，程序就会自动给我们生成一个AVIODirContext，里面存储了一些目录的基本信息，因此在后续我们调用avio_read_dir()或者是avio_close_dir()时候，它将作为参数进行传递，这样avio_read_dir()或者是avio_close_dir()就知道我们实际上要操作的是哪个目录。</li><li>AVIODirEntry：目录项。用于存放该目录下每个文件的文件名，文件大小等信息</li></ul><p>接下来通过这几个函数，我们来简单的实现一下ls这个命令的具体功能。</p><p>PS：在终端输入ls后，即可显示该目录下所有文件的文件名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    AVIODirContext *ctx = <span class="literal">NULL</span>;</span><br><span class="line">    AVIODirEntry *entry = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    av_log_set_level(AV_LOG_INFO);</span><br><span class="line">    <span class="type">int</span> ret = avio_open_dir(&amp;ctx, <span class="string">&quot;./&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Cant open dir %s\n &quot;</span>,av_err2str(ret));</span><br><span class="line">        <span class="keyword">goto</span> __fail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ret = avio_read_dir(ctx, &amp;entry);</span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Cant read dir %s\n &quot;</span>,av_err2str(ret));</span><br><span class="line">            <span class="keyword">goto</span> __fail;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!entry)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;%12&quot;</span>PRId64<span class="string">&quot; %s \n&quot;</span>, entry-&gt;size, entry-&gt;name);</span><br><span class="line">        avio_free_directory_entry(&amp;entry);<span class="comment">//释放</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">__fail:</span><br><span class="line">    avio_close_dir(&amp;ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入编译命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -g -o list ffmpeg_list.c `pkg-config --cflags  --libs libavutil libavformat `</span><br></pre></td></tr></table></figure><p><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/3.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg日志系统</title>
      <link href="/2022/10/04/FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/10/04/FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤一：引入相关头文件"><a href="#步骤一：引入相关头文件" class="headerlink" title="步骤一：引入相关头文件"></a>步骤一：引入相关头文件</h2><p>从libavutil这个包含工具函数的文件夹中引入log.h头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="步骤二：设置日志级别"><a href="#步骤二：设置日志级别" class="headerlink" title="步骤二：设置日志级别"></a>步骤二：设置日志级别</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">av_log_set_level</span>(AV_LOG_DEBUG)</span><br></pre></td></tr></table></figure><p><strong>常用的日志级别：</strong></p><ul><li>AV_LOG_ERROR</li><li>AV_LOG_WARNING</li><li>AV_LOG_INFO</li><li>AV_LOG_DEBUG</li></ul><p>从上到下看，这四个优先级别：从高到低。<br>也就是说如果设置为最低级别的AV_LOG_DEBUG，那么所有的日志信息都会打印出来；而如果设置为最高级别的AV_LOG_ERROR，那么只有AV_LOG_ERROR的日志信息才会打印出来。</p><h2 id="步骤三：打印日志信息"><a href="#步骤三：打印日志信息" class="headerlink" title="步骤三：打印日志信息"></a>步骤三：打印日志信息</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;...%s\n&quot;</span>, op)</span><br></pre></td></tr></table></figure><p>av_log(…)函数中的第1个参数指定该log所属的结构体,例如AVFormatContext、AVCodecContext等等，一般都设置成NULL；第2个参数表示该日志的级别；第3个参数是需要打印的字符串信息，里面可以添加%s，%d等占位符，第4，5，…参数代表第3个参数中字符串内占位符要显示的内容。</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    av_log_set_level(AV_LOG_DEBUG);<span class="comment">//设置日志级别</span></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_DEBUG, <span class="string">&quot;Hello word!\n&quot;</span>);<span class="comment">//设置输出内容</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存成.cw文件退出后，打开命令行窗口，</p><p>Mac下输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang -g -o log log.c -I/usr/local/ffmpeg/include -L/usr/local/ffmpeg/lib -lavutil</span><br><span class="line">或者是输入：</span><br><span class="line">clang -g -o log log.c `pkg-config --cflags --libs libavutil`</span><br></pre></td></tr></table></figure><p>Linux下输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -o</span><br></pre></td></tr></table></figure><p>PS：</p><p>-g 参数：输出有调试信息的</p><p>-o 参数：-o参数后面接的是输出执行文件的名称</p><p>-I 参数：指定引入的FFmpeg头文件的路径</p><p>-L 参数：指定所依赖的FFmpeg库的路径</p><p>-l 参数：指定所依赖的FFmpeg库的名称</p><p>–cflag参数：表示获取所需要引入的头文件目录地址</p><p> –libs参数：表示获取所依赖的库路径以及指定所要添加的库的名字（后面接库的名字）</p><p>回车编译后，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./log</span><br></pre></td></tr></table></figure><p>就能看到结果了。</p><p><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/1.png"></p><p>如果将代码中的日志级别改成AV_LOG_INFO的话，那就无法输出AV_LOG_DEBUG级别的信息了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    av_log_set_level(AV_LOG_INFO);<span class="comment">//改成AV_LOG_INFO级别</span></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_DEBUG, <span class="string">&quot;AV_LOG_DEBUG级别日志信息\n&quot;</span>);</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;AV_LOG_INFO级别日志信息&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/2.png"></p><p>而比AV_LOG_INFO级别更高的日志是可以正常打印的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line">    av_log_set_level(AV_LOG_INFO);<span class="comment">//改成AV_LOG_INFO级别</span></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_DEBUG, <span class="string">&quot;AV_LOG_DEBUG级别日志信息\n&quot;</span>);</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;AV_LOG_INFO级别日志信息&quot;</span>);</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;AV_LOG_ERROR级别日志信息&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/3.png"></p><p>PS：</p><p>如果采用pkg-config报以下错误的话：<br><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/4.png"></p><p>说明没有配置环境，首先在命令行窗口输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bash_profile </span><br></pre></td></tr></table></figure><p>打开后添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/ffmpeg/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/ffmpeg/lib/pkgconfig</span><br><span class="line">export LD_LIBRARY_PATH=$LIB_LIBRARY_PATH:/usr/local/ffmpeg/lib</span><br></pre></td></tr></table></figure><p>然后按下esc退出编辑后，按下:wq保存退出</p><p>接着输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>此时环境配置生效，再次运行命令，即可正常编译<br><img src="/./FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/5.png"></p><p>PS:<br>MAC设置环境变量时, 配置的 bash_profile 没有生效，需要手动执行下面命令才生效。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>原因：zsh和bash有别， zsh模式不执行上述脚本，bash模式才执行。mac自带zsh，新款的默认使用后zsh。</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd //Users/wujianqiang</span><br><span class="line"></span><br><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">bash</span><br><span class="line"></span><br><span class="line">vim   ~/.bashrc </span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/ffmpeg/bin:$PATH&quot;</span><br><span class="line">export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/ffmpeg/lib/pkgconfig</span><br><span class="line">export LD_LIBRARY_PATH=$LIB_LIBRARY_PATH:/usr/local/ffmpeg/lib</span><br></pre></td></tr></table></figure><p>借助输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br><span class="line">zsh</span><br><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/ffmpeg/bin:$PATH&quot;</span><br><span class="line">export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/ffmpeg/lib/pkgconfig</span><br><span class="line">export LD_LIBRARY_PATH=$LIB_LIBRARY_PATH:/usr/local/ffmpeg/lib</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后:wq退出即可。</p><p>PS:为了让.bash_profile生效，一般在zhsrc加上一句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg学习笔记</title>
      <link href="/2022/10/03/FFmpeg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/03/FFmpeg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>之前学习FFmpeg一直是跳着学，用到什么学习什么，没有一个系统性的学习过程。因此趁着最近这段时间刚好有空，想从头到尾仔仔细细的学习一遍，同时整理一下相关的学习笔记，帮助别其他伙伴们快速入门FFmpeg，同时也方便自己后续进行回顾学习。</p><p>本篇博客的目的是让零基础的读者可以通过阅读该博客，从而彻底的熟练使用FFmpeg，以及音视频的相关知识。因此我将通过之前学习雷霄骅前辈的博客，李超大佬的课程，以及实际项目工作中运用到知识和遇到的问题进行精华总结。帮助其他伙伴们从零开始彻底掌握FFmpeg。</p><h1 id="本课程分为四个部分："><a href="#本课程分为四个部分：" class="headerlink" title="本课程分为四个部分："></a>本课程分为四个部分：</h1><h2 id="第一部分：音视频基础知识"><a href="#第一部分：音视频基础知识" class="headerlink" title="第一部分：音视频基础知识"></a>第一部分：音视频基础知识</h2><h3 id="帧率、码率、比特率等参数含义"><a href="#帧率、码率、比特率等参数含义" class="headerlink" title="- 帧率、码率、比特率等参数含义"></a>- 帧率、码率、比特率等参数含义</h3><h3 id="I帧、B帧、P帧的区别"><a href="#I帧、B帧、P帧的区别" class="headerlink" title="- I帧、B帧、P帧的区别"></a>- I帧、B帧、P帧的区别</h3><h3 id="YUV和RGB是什么"><a href="#YUV和RGB是什么" class="headerlink" title="- YUV和RGB是什么"></a>- YUV和RGB是什么</h3><h3 id="H264是什么"><a href="#H264是什么" class="headerlink" title="- H264是什么"></a>- H264是什么</h3><h2 id="第二部分：-如何在各个平台上编译FFmpeg"><a href="#第二部分：-如何在各个平台上编译FFmpeg" class="headerlink" title="第二部分： 如何在各个平台上编译FFmpeg"></a>第二部分： 如何在各个平台上编译FFmpeg</h2><h3 id="Windows系统编译FFmpeg"><a href="#Windows系统编译FFmpeg" class="headerlink" title="- Windows系统编译FFmpeg"></a>- Windows系统编译FFmpeg</h3><h3 id="MacOS系统编译FFmpeg"><a href="#MacOS系统编译FFmpeg" class="headerlink" title="- MacOS系统编译FFmpeg"></a>- <a href="https://wujianqiangcode.github.io/2022/10/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/">MacOS系统编译FFmpeg</a></h3><h3 id="Linux系统编译FFmpeg"><a href="#Linux系统编译FFmpeg" class="headerlink" title="- Linux系统编译FFmpeg"></a>- Linux系统编译FFmpeg</h3><h3 id="编译IOS系统可用的FFmpeg"><a href="#编译IOS系统可用的FFmpeg" class="headerlink" title="- 编译IOS系统可用的FFmpeg"></a>- 编译IOS系统可用的FFmpeg</h3><h3 id="编译Android系统可用的FFmpeg"><a href="#编译Android系统可用的FFmpeg" class="headerlink" title="- 编译Android系统可用的FFmpeg"></a>- 编译Android系统可用的FFmpeg</h3><h2 id="第三部分：FFmpeg常用的命令有哪些"><a href="#第三部分：FFmpeg常用的命令有哪些" class="headerlink" title="第三部分：FFmpeg常用的命令有哪些"></a>第三部分：FFmpeg常用的命令有哪些</h2><h2 id="第四部分：如何调用FFmpeg的函数实现功能"><a href="#第四部分：如何调用FFmpeg的函数实现功能" class="headerlink" title="第四部分：如何调用FFmpeg的函数实现功能"></a>第四部分：如何调用FFmpeg的函数实现功能</h2><h3 id="FFmpeg源代码结构"><a href="#FFmpeg源代码结构" class="headerlink" title="- FFmpeg源代码结构"></a>- <a href="https://wujianqiangcode.github.io/2022/10/03/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/">FFmpeg源代码结构</a></h3><h3 id="FFmpeg日志系统"><a href="#FFmpeg日志系统" class="headerlink" title="- FFmpeg日志系统"></a>- <a href="https://wujianqiangcode.github.io/2022/10/04/FFmpeg%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/">FFmpeg日志系统</a></h3><h3 id="FFmpeg的文件IO操作"><a href="#FFmpeg的文件IO操作" class="headerlink" title="- FFmpeg的文件IO操作"></a>- <a href="https://wujianqiangcode.github.io/2022/10/04/FFmpeg%E6%96%87%E4%BB%B6IO%E6%93%8D%E4%BD%9C/">FFmpeg的文件IO操作</a></h3><h2 id="第五部分：深入理解主流的音视频协议"><a href="#第五部分：深入理解主流的音视频协议" class="headerlink" title="第五部分：深入理解主流的音视频协议"></a>第五部分：深入理解主流的音视频协议</h2><h2 id="第六部分：深度剖析FFmpeg源代码"><a href="#第六部分：深度剖析FFmpeg源代码" class="headerlink" title="第六部分：深度剖析FFmpeg源代码"></a>第六部分：深度剖析FFmpeg源代码</h2><h2 id="第七部分：第三方开源库和主流渲染引擎框架的学习"><a href="#第七部分：第三方开源库和主流渲染引擎框架的学习" class="headerlink" title="第七部分：第三方开源库和主流渲染引擎框架的学习"></a>第七部分：第三方开源库和主流渲染引擎框架的学习</h2><h3 id="第三方开源库"><a href="#第三方开源库" class="headerlink" title="第三方开源库"></a>第三方开源库</h3><h4 id="WebRTC-学习笔记"><a href="#WebRTC-学习笔记" class="headerlink" title="- WebRTC 学习笔记"></a>- WebRTC 学习笔记</h4><h4 id="libyuv"><a href="#libyuv" class="headerlink" title="- libyuv"></a>- libyuv</h4><h4 id="Mplayer"><a href="#Mplayer" class="headerlink" title="- Mplayer"></a>- Mplayer</h4><h4 id="x264"><a href="#x264" class="headerlink" title="- x264"></a>- x264</h4><h4 id="OpenCV-学习笔记"><a href="#OpenCV-学习笔记" class="headerlink" title="- OpenCV 学习笔记"></a>- OpenCV 学习笔记</h4><h3 id="主流渲染引擎框架"><a href="#主流渲染引擎框架" class="headerlink" title="主流渲染引擎框架"></a>主流渲染引擎框架</h3><h4 id="OpenGL-学习笔记"><a href="#OpenGL-学习笔记" class="headerlink" title="- OpenGL 学习笔记"></a>- OpenGL 学习笔记</h4><h4 id="Metal-学习笔记"><a href="#Metal-学习笔记" class="headerlink" title="- Metal 学习笔记"></a>- Metal 学习笔记</h4><h4 id="DirectX-3D-学习笔记"><a href="#DirectX-3D-学习笔记" class="headerlink" title="- DirectX 3D 学习笔记"></a>- DirectX 3D 学习笔记</h4><h4 id="OpenCL"><a href="#OpenCL" class="headerlink" title="- OpenCL"></a>- OpenCL</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg源代码结构</title>
      <link href="/2022/10/03/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/"/>
      <url>/2022/10/03/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="FFmpeg源代码目录："><a href="#FFmpeg源代码目录：" class="headerlink" title="FFmpeg源代码目录："></a>FFmpeg源代码目录：</h1><p><img src="/./FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84/1.png"></p><table>  <tr>    <th>libavcodec</th>    <th>包含一系列编解码器等实现（如：h264、h265、AAC、Opus等）  </tr>  <tr>    <td>libavformat</td>    <td>包含音视频协议、容器格式以及IO访问的相关函数实现</td>  </tr>  <tr>    <td>libavutil</td>    <td>包含hash器，解码器和各种工具函数</td>  </tr>  <tr>    <td>libavfilter</td>    <td>提供了各种音视频过滤器（如：多路流合并、变速等特效）</td>  </tr>  <tr>    <td>libavdevice</td>    <td>包含对所有音视频设备等操作，提供访问捕获设备和回放设备等接口</td>  </tr>  <tr>    <td>libswresample</td>    <td>实现了混音和重采样</td>  </tr>  <tr>    <td>libswscale</td>    <td>实现了色彩转换和图像的缩放功能</td>  </tr></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac下编译FFmpeg全过程</title>
      <link href="/2022/10/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/10/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><p>首先用在命令行窗口用Git命令下载FFmpeg源代码</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.ffmpeg.org/ffmpeg.git</span><br></pre></td></tr></table></figure><p>进行源代码的下载</p><h2 id="编译FFmpeg"><a href="#编译FFmpeg" class="headerlink" title="编译FFmpeg"></a>编译FFmpeg</h2><p>下载完后，进入ffmpeg文件夹切换到对应分支，这边切换到4.2版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout release/4.2</span><br></pre></td></tr></table></figure><p>首先输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --cc=/usr/bin/clang --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libmp3lame --enable-libx265  --enable-filter=delogo --enable-debug --disable-optimizations --enable-libspeex --enable-videotoolbox --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --host-cflags= --host-ldflags=</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/1.png"></p><h3 id="检测编译环境"><a href="#检测编译环境" class="headerlink" title="检测编译环境"></a>检测编译环境</h3><h4 id="安装yasm"><a href="#安装yasm" class="headerlink" title="安装yasm"></a>安装yasm</h4><p>如果出现该报错提示，说明还需要下载一下yasm</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/2.png"></p><p><a href="http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz">yasm的下载链接</a></p><p>解压完yasm后，切换路径：</p><p>cd yasm-1.3.0<br> 接着进行执行配置，输入：</p><p> .&#x2F;configure<br>然后进行编译，输入：</p><p>make<br>最后进行安装，输入：</p><p>make install（提示：Permission denied，就执行sudo make install）</p><p>安装成功yasm后，我们继续cd进入到ffmpeg的文件夹下，进行.&#x2F;configure操作</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/3.png"></p><h4 id="安装libmp3lame"><a href="#安装libmp3lame" class="headerlink" title="安装libmp3lame"></a>安装libmp3lame</h4><p>如果出现以下报错，说明我们还得安装一下libmp3lame</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/5.png"></p><p><a href="https://sourceforge.net/projects/lame/files/lame/3.99/">libmp3lame的下载地址</a></p><p>解压完lame-3.100后，切换路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd lame-3.100</span><br></pre></td></tr></table></figure><p> 接着进行执行配置，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>然后进行编译，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/6.png"></p><p>如果出现以上报错，进入include文件夹，找到libmp3lame.sym文件</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/7.png"></p><p>删除lame_init_old所在行</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/8.png"></p><p>然后继续make</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/9.png"></p><p> 最后进行安装，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install（提示：Permission denied，就执行sudo make install）</span><br></pre></td></tr></table></figure><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/10.png"></p><p>继续cd到ffmpeg文件夹中，进行.&#x2F;configure操作</p><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/11.png"></p><h4 id="安装x264、x265-等"><a href="#安装x264、x265-等" class="headerlink" title="安装x264、x265 等"></a>安装x264、x265 等</h4><p>大概率x264、x265这些也没有安装，直接一口气输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install fdk-aac&amp;&amp;brew install x264&amp;&amp;brew install x265&amp;&amp;brew install speex&amp;&amp;brew install pkg-config&amp;&amp;brew  install sdl2</span><br></pre></td></tr></table></figure><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/12.png"><br>等待跑完后 再执行<br>之前ffmpeg到configure操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --cc=/usr/bin/clang --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libmp3lame --enable-libx265  --enable-filter=delogo --enable-debug --disable-optimizations --enable-libspeex --enable-videotoolbox --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --host-cflags= --host-ldflags=</span><br></pre></td></tr></table></figure><p><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/13.png"></p><p>此时输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>必须加上sudo，否则会出现改报错<br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/15.png"><br>开始进行编译<br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/14.png"><br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/16.png"></p><p>等待编译完成后，我们输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/ffmpeg/</span><br></pre></td></tr></table></figure><p>进入后就能看到我们编译完成的文件了。<br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/17.png"></p><h2 id="添加ffmpeg环境变量"><a href="#添加ffmpeg环境变量" class="headerlink" title="添加ffmpeg环境变量"></a>添加ffmpeg环境变量</h2><p>接下来为了方便，我们修改一下环境变量，命令行输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p>回车后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH: /usr/local/ffmpeg/bin</span><br></pre></td></tr></table></figure><p>然后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>接着输入，让环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后查看环境变量的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>此时如果生效后在任意位置打开命令行窗口输入ffmpeg，将显示如下内容，证明已成功安装完成。<br><img src="/./%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8mac%E4%B8%8B%E7%BC%96%E8%AF%91FFmpeg%E7%9A%84%E8%BF%87%E7%A8%8B/18.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo搭建个人博客全过程</title>
      <link href="/2022/10/01/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/10/01/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en/">安装地址</a></p><p>点击16.17.1.LTS</p><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png"><br>下载完成后，一直点击下一步进行安装即可</p><p><font color = gree>PS:这个安装包内除了Node.js以外，还包含npm包管理器，这个是等会搭建hexo博客所必须用到的东西。</font></p><h2 id="通过npm安装cnpm"><a href="#通过npm安装cnpm" class="headerlink" title="通过npm安装cnpm"></a>通过npm安装cnpm</h2><p>接着打开终端,切换到root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>输入密码<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png"></p><span id="more"></span><p>此时我们可以查看一下刚刚安装的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png"></p><p>此时证明刚刚有成功安装node.js</p><p>接着利用npm来安装cmpn，通过镜像圆来解决访问国外网站较慢的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png"><br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png"></p><p>接着用cmpn来安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png"></p><h2 id="通过hexo搭建博客"><a href="#通过hexo搭建博客" class="headerlink" title="通过hexo搭建博客"></a>通过hexo搭建博客</h2><p>输入pwd查看当前位置</p><p>接着新建一个空白文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><p><font color =gree>PS：后续如果在搭建博客的过程中出现问题的话，可以把该文件夹删掉，再重来接下来的所有步骤</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog/</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/7.png"></p><p>接下来可以真正使用hexo来生成我们的博客，先初始化一个博客，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8.png"><br>等待安装初始化完成后，启动我们的博客，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/9.png"></p><p>用浏览器打开<a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/10.png"></p><p>接着键盘输入control+c断开连接</p><p>此时，我们可以创建一篇文章，按照顺序输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;第一篇文章&quot;</span><br><span class="line">cd source/_posts/</span><br><span class="line">ls</span><br><span class="line">vim 第一篇文章.md</span><br></pre></td></tr></table></figure><p>进入vim后可以随便输入点内容,然后保存退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><p>接着按照顺序输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>继续用浏览器打开<a href="http://localhost:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%88%9A%E5%88%9A%E5%86%99%E7%9A%84%E5%86%85%E5%AE%B9%E4%BA%86">http://localhost:4000/，就可以看到刚刚写的内容了</a></p><h2 id="将博客部署到Github上"><a href="#将博客部署到Github上" class="headerlink" title="将博客部署到Github上"></a>将博客部署到Github上</h2><p>接下来，我们先在浏览器上登陆Github，并新建一个仓库</p><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/11.png"></p><p>然后输入Repository name<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/12.png"></p><p>Description里面可以简单写一下<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/13.png"></p><p>最后点击Creat repository<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/14.png"></p><p>接着安装git部署插件，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/15.png"></p><p>然后用vim打开config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>到文件最底部，找到# Deployment配置<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/16.png"></p><p>在type:后面写上：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/18.png"><br>并输入:wq保存退出</p><p>PS:repo的地址在这：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/17.png"></p><p>此时将它部署到GitHub上，，先配置git信息，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;wujianqiangCode&quot;</span><br><span class="line">git config --global user.email &quot;ijianqiangwu@outlook.com&quot;</span><br></pre></td></tr></table></figure><p>接着输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果出现该报错：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/19.png"><br>github在2021年8月14日七夕这天搞事情，如果这天你提交了github代码报错如下：<br>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.<br>那么就得换成token登陆了，坑爹！</p><p>登录自己的github账号，个人设置那里<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20.png"></p><p><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/21.png"></p><p>找到Developer seetings，点击进入配置<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/22.png"></p><p>最后点击Generate生成令牌<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/23.png"></p><p>记得把你的token保存下来，因为你再次刷新网页的时候，你已经没有办法看到它了！！！</p><p>之后就可以用自己生成的token登录，把上面生成的token粘贴到输入密码的位置，然后成功hexo d了。</p><p>此时输入<a href="https://wujianqiangcode.github.io/%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E5%8D%9A%E5%AE%A2%E4%BA%86">https://wujianqiangcode.github.io/就能看到博客了</a></p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>接着是更换主题，浏览器输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github.com/litten/hexo-theme-yilia</span><br></pre></td></tr></table></figure><p>这边推荐可以换成🀄这个作者的主题,将他的主题仓库克隆到我们的themes&#x2F;yilia文件夹中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>clone完后输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml </span><br></pre></td></tr></table></figure><p>找到theme<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/24.png"><br>换成yilia后保存退出<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/25.png"></p><p>接着为了能够插入图片，找到post_asset_folder：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/27.png"></p><p>改成：<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/28.png"></p><p>保存退出后，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure><p>接着输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>此时登陆博客，多刷新几次后就能看到结果<br><img src="/./%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/26.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
